<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ezhixuan</title>
  <icon>https://www.ezhixuan.xyz/icon/android-chrome-192x192.png</icon>
  <subtitle>我们都要努力成为更好的自己 | 如果遇到了，就记录下来</subtitle>
  <link href="https://www.ezhixuan.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.ezhixuan.xyz/"/>
  <updated>2023-10-09T17:23:14.000Z</updated>
  <id>https://www.ezhixuan.xyz/</id>
  
  <author>
    <name>Ezhixuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优雅的非空判断</title>
    <link href="https://www.ezhixuan.xyz/post/df2d6cfb/"/>
    <id>https://www.ezhixuan.xyz/post/df2d6cfb/</id>
    <published>2023-10-09T17:23:14.000Z</published>
    <updated>2023-10-09T17:23:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何优雅的非空判断"><a class="markdownIt-Anchor" href="#如何优雅的非空判断"></a> 如何优雅的非空判断</h2><p>在编写代码的过程中，经常会遇到对于传输过来的数据有特殊要求，有一个错误总会在意料之外出现,那就是空指针异常。空指针的出现也很简单,得到了一个null对象,并调用它的某些方法,出现空指针异常。</p><p>对于简单的对象，我们可以使用 ！= null 再去使用，或者调用一些Api去校验，形如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 校验参数</span></span><br><span class="line"><span class="keyword">if</span> (dishPageQueryDTO == <span class="literal">null</span></span><br><span class="line">    || dishPageQueryDTO.getPage() &lt;= <span class="number">0</span></span><br><span class="line">    || dishPageQueryDTO.getPageSize() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullDataException</span>(MessageConstant.NULL_DATA);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.校验数据</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> dishDTO.check();</span><br><span class="line"><span class="keyword">if</span> (!check) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullDataException</span>(MessageConstant.NULL_DATA);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(o))&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于少量的参数这样不仅直观并且也能根据特定需求进行特殊判断，但是如果遇到参数过多的情况，就会导致核心业务代码还未开始编辑就产出大量的判断代码，甚至判断的代码量超过该业务的代码，并且我们在某个业务的代码无法在其他模块复用，因此，需要考虑如何优雅的进行非空判断。</p><hr><h2 id="hibernate-validator"><a class="markdownIt-Anchor" href="#hibernate-validator"></a> hibernate-validator</h2><p><code>hibernate-validator</code>提供多种特殊判断以及数值空值形如@Email,@Max,@Size…</p><p>更多的使用可以参考官方文档<a href="https://docs.jboss.org/hibernate/validator/6.2/reference/en-US/html_single/#preface">Hibernate Validator 6.2.5.Final - Jakarta Bean Validation Reference Implementation: Reference Guide (jboss.org)</a></p><p>本篇主要介绍非空判断的使用</p><h3 id="导入依赖"><a class="markdownIt-Anchor" href="#导入依赖"></a> 导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关于非空注解"><a class="markdownIt-Anchor" href="#关于非空注解"></a> 关于非空注解</h3><p>关于非空判断常用的注解有@NotNull, @NotBlank, @NotEmpty</p><p>对于这三个注解，官方给出的解释为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### @NotBlank</span><br><span class="line"></span><br><span class="line">Checks that the annotated character sequence is not null and the trimmed length is greater than 0. The difference to is that this constraint can only be applied on character sequences and that trailing white-spaces are ignored.`@NotEmpty`</span><br><span class="line"></span><br><span class="line">- Supported data types</span><br><span class="line"></span><br><span class="line">  `CharSequence`</span><br><span class="line"></span><br><span class="line">- Hibernate metadata impact</span><br><span class="line"></span><br><span class="line">  None</span><br><span class="line"></span><br><span class="line">#### @NotEmpty</span><br><span class="line"></span><br><span class="line">Checks whether the annotated element is not null nor empty</span><br><span class="line"></span><br><span class="line">- Supported data types</span><br><span class="line"></span><br><span class="line">  `CharSequence`, , and arrays`Collection``Map`</span><br><span class="line"></span><br><span class="line">- Hibernate metadata impact</span><br><span class="line"></span><br><span class="line">  None</span><br><span class="line"></span><br><span class="line">#### @NotNull</span><br><span class="line"></span><br><span class="line">Checks that the annotated value is not `null`</span><br><span class="line"></span><br><span class="line">- Supported data types</span><br><span class="line"></span><br><span class="line">  Any type</span><br><span class="line"></span><br><span class="line">- Hibernate metadata impact</span><br><span class="line"></span><br><span class="line">  Column(s) are not nullable</span><br></pre></td></tr></table></figure><p>总结来说<code>@NotNull</code>适用于任何类型的非空判断，但是存在限制，即只能检查非空，因此引出<code>@NotBlank</code>和<code>@NotEmpty</code>，其中@NotBlank适用于字符串类型，它可以判断去空后size是否大于0，@NotEmpty在@NotBlank的基础上又增强拓展了对于集合等类型的判断。</p><p>@NotNull：用于验证字段或方法参数不为 null。它可以应用于任意类型的字段，包括基本类型和引用类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p>@NotBlank：用于验证字符串字段或方法参数不为 null 且长度大于 0，且字符串不能仅由空格组成。它只适用于字符串类型的字段。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotBlank</span></span><br><span class="line"><span class="keyword">private</span> String title;</span><br></pre></td></tr></table></figure><p>@NotEmpty：用于验证字段或方法参数不为 null 且不为空，即长度大于 0。它适用于字符串、集合、Map 和数组类型的字段。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; tags;</span><br></pre></td></tr></table></figure><p>需要注意的是，@NotBlank 和 @NotEmpty 注解都是对 @NotNull 注解的补充，所以如果应用 @NotBlank 或 @NotEmpty 注解时，该字段或方法参数会自动被认为不为 null。此外，它们都可以与其他的约束注解一起使用。</p><h2 id="关于valid和validated"><a class="markdownIt-Anchor" href="#关于valid和validated"></a> 关于@Valid和@Validated</h2><h3 id="适用范围"><a class="markdownIt-Anchor" href="#适用范围"></a> 适用范围</h3><p>@Valid 注解是 Java 标准库中的注解（javax.validation.Valid），而 @Validated 注解是 Spring 框架提供的注解（org.springframework.validation.annotation.Validated）。因此，如果在非 Spring 环境中使用验证框架，应该使用 @Valid 注解；如果在 Spring 环境中使用验证框架，则可以使用 @Validated 注解。</p><h3 id="使用限制"><a class="markdownIt-Anchor" href="#使用限制"></a> 使用限制</h3><p>@Validated 注解在 Spring 环境中的使用存在一些限制，它只能应用于类级别的验证（Class-level validation）和方法级别的验证（Method-level validation）。而 @Valid 注解可以应用于类的字段级别、方法的参数级别、方法的返回值级别等。</p><h3 id="分组校验"><a class="markdownIt-Anchor" href="#分组校验"></a> 分组校验</h3><p>@Validated 注解支持分组校验（Group Validation）功能，可以根据不同的场景对验证规则进行分组。通过在验证注解上使用分组接口进行声明，可以指定只验证特定分组的约束条件。这对于复杂的验证场景非常有用。而 @Valid 注解在验证过程中不支持分组校验。</p><h2 id="实际使用"><a class="markdownIt-Anchor" href="#实际使用"></a> 实际使用</h2><p>这里以我的实际使用举例，如有错误，欢迎指出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;友链添加DTO&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkDTO</span> &#123;</span><br><span class="line">  <span class="meta">@NotNull(message = &quot;友链id不能为空&quot;, groups = Update.class)</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotBlank(message = &quot;友链名称不能为空&quot;, groups = &#123;Insert.class,Update.class&#125;)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotBlank(message = &quot;友链logo不能为空&quot;, groups = &#123;Insert.class,Update.class&#125;)</span></span><br><span class="line">  <span class="keyword">private</span> String logo;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotBlank(message = &quot;友链描述不能为空&quot;, groups = &#123;Insert.class,Update.class&#125;)</span></span><br><span class="line">  <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotBlank(message = &quot;友链地址不能为空&quot;, groups = &#123;Insert.class,Update.class&#125;)</span></span><br><span class="line">  <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotBlank(message = &quot;友链状态不能为空&quot;, groups = &#123;Insert.class,Update.class&#125;)</span></span><br><span class="line">  <span class="keyword">private</span> String status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如上述代码所示，一般简单使用可以忽略groups参数，只填写message即可，默认会是<code>Default.class</code></p><p>groups个人理解为使用的分组，对于不同的分组，后续可以进行不同的操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Log(businessName = &quot;添加友链&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;添加友链&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult&lt;String&gt; <span class="title function_">insertLinkSys</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(Insert.class)</span> LinkDTO linkDto)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> linkService.insertLinkSys(linkDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在controller层我们在需要约束的传参前添加<code>@Valid</code>或<code>@Validated</code>注解，否则验证不会生效，在传参中我配置了分组，所以这里使用@Validated并进行分组校验，可以只对处于<code>Insert.class</code>分组的参数进行校验。如果没有进行分组则可以直接使用@Valid</p><p>请求参数，这里基本放空</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;address&quot;: &quot;&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;id&quot;: &quot;&quot;,</span><br><span class="line">  &quot;logo&quot;: &quot;&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;&quot;,</span><br><span class="line">  &quot;status&quot;: &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Validation failed for argument [0] in public com.ezhixuan.xuan_framework.domain.vo.ResponseResult&lt;java.lang.String&gt; com.ezhixuan.xuan_admin.controller.LinkController.insertLinkSys(com.ezhixuan.xuan_framework.domain.dto.link.LinkDTO) with 5 errors: [Field error in object &#x27;linkDTO&#x27; on field &#x27;name&#x27;: rejected value []; codes [NotBlank.linkDTO.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [linkDTO.name,name]; arguments []; default message [name]]; default message [友链名称不能为空]] [Field error in object &#x27;linkDTO&#x27; on field &#x27;logo&#x27;: rejected value []; codes [NotBlank.linkDTO.logo,NotBlank.logo,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [linkDTO.logo,logo]; arguments []; default message [logo]]; default message [友链logo不能为空]] [Field error in object &#x27;linkDTO&#x27; on field &#x27;description&#x27;: rejected value []; codes [NotBlank.linkDTO.description,NotBlank.description,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [linkDTO.description,description]; arguments []; default message [description]]; default message [友链描述不能为空]] [Field error in object &#x27;linkDTO&#x27; on field &#x27;address&#x27;: rejected value []; codes [NotBlank.linkDTO.address,NotBlank.address,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [linkDTO.address,address]; arguments []; default message [address]]; default message [友链地址不能为空]] [Field error in object &#x27;linkDTO&#x27; on field &#x27;status&#x27;: rejected value []; codes [NotBlank.linkDTO.status,NotBlank.status,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [linkDTO.status,status]; arguments []; default message [status]]; default message [友链状态不能为空]] &quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到响应message中成功响应判断，并且只有分组为<code>Insert.class</code>的被处理，分组为<code>Update.class</code>的id虽然也是空但是<code>友链id不能为空</code>并没有出现在响应消息中。</p><hr><h2 id="拓展-分组"><a class="markdownIt-Anchor" href="#拓展-分组"></a> 拓展 - 分组</h2><p>分组的情况有多种，我使用的是自定义接口并继承Default即可，注意继承的类即可，不多赘述。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.xuan_framework.handler.validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.groups.Default;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ezhixuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Insert</span> <span class="keyword">extends</span> <span class="title class_">Default</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="拓展-异常处理"><a class="markdownIt-Anchor" href="#拓展-异常处理"></a> 拓展 - 异常处理</h2><p>对于上文提到的返回消息并不符合自己项目的响应格式，所以需要自定义异常处理器。</p><p>使用@ExceptionHandler(MethodArgumentNotValidException.class)捕获异常</p><div class="tag-plugin image"><div class="image-bg"><img src="image-20231010023753723.png" alt="image-20231010023753723"></div><div class="image-meta"><span class="image-caption center">image-20231010023753723</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20231010023310934.png" alt="image-20231010023310934"></div><div class="image-meta"><span class="image-caption center">image-20231010023310934</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20231010023547920.png" alt="image-20231010023547920"></div><div class="image-meta"><span class="image-caption center">image-20231010023547920</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20231010023926959.png" alt="image-20231010023926959"></div><div class="image-meta"><span class="image-caption center">image-20231010023926959</span></div></div><p>由此可以得知ex.getBindingResult().getAllErrors()可以获得Message</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取异常信息</span></span><br><span class="line">    List&lt;ObjectError&gt; allErrors = ex.getBindingResult().getAllErrors();</span><br><span class="line">    ArrayList&lt;String&gt; errorsMessage = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(allErrors.size());</span><br><span class="line">    allErrors.forEach(error -&gt; errorsMessage.add(error.getDefaultMessage()));</span><br></pre></td></tr></table></figure><p>但其实没必要将所有问题一股脑反馈给用户，只需反应一条，逐步解决，循循渐进即可。</p><p>最终</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">  <span class="keyword">public</span> ResponseResult <span class="title function_">exceptionHandler</span><span class="params">(MethodArgumentNotValidException ex)</span> &#123;</span><br><span class="line">    log.error(<span class="string">&quot;异常信息：&#123;&#125;&quot;</span>, ex);</span><br><span class="line">    <span class="comment">// 获取异常信息</span></span><br><span class="line">    List&lt;ObjectError&gt; allErrors = ex.getBindingResult().getAllErrors();</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.errorResult(<span class="number">500</span>, allErrors.get(<span class="number">0</span>).getDefaultMessage());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;友链logo不能为空&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展-常用命令"><a class="markdownIt-Anchor" href="#拓展-常用命令"></a> 拓展 - 常用命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Null    限制必须为null</span><br><span class="line">@NotNull    限制必须不能为null</span><br><span class="line">@AssertFalse    限制必须为false</span><br><span class="line">@AssertTrue    限制必须为true</span><br><span class="line">@DecimalMax(value)    限制必须为一个不超过指定大小值的数字</span><br><span class="line">@DecimalMin(value)    限制必须为一个不低于指定大小值的数字</span><br><span class="line">@Digits(integert,fraction)    限制必须为一个小数,且整数部分位数不能超过integer,小数部分位数不能超过fraction</span><br><span class="line">@Futrue    限制必须为一个将来的日期</span><br><span class="line">@Past    限制必须为一个过去的日期</span><br><span class="line">@Max(value)    限制必须为一个不超过指定大小值的数字</span><br><span class="line">@Min(value)    限制必须为一个不低于指定大小值的数字</span><br><span class="line">@Pattern(value)    限制必须符合指定的正则表达式</span><br><span class="line">@Size(max,min)    限制字符长度必须处在max和min的值之间</span><br><span class="line">@NotEmpty    验证注解的元素值不为null且不为空(字符串长度不为0,集合大小不为0)</span><br><span class="line">@NotBlank    验证注解的元素值不为空(不为null,且去除首位空格后长度不为0),不同于@NotEmpty,@NotBlank只适用于字符串的校验且在校验时会去除字符串的空格</span><br><span class="line">@Email    验证值是否为邮箱,也可以通过正则表达式和flag指定自定义的email格式</span><br><span class="line">@Length    限制字符串参数长度</span><br><span class="line">@Range    限制数值类型或者字符串在指定范围</span><br><span class="line">@URL    对URL地址进行验证</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">如何优雅的非空判断</summary>
    
    
    
    <category term="技术分享" scheme="https://www.ezhixuan.xyz/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/tags/java/"/>
    
    <category term="学习" scheme="https://www.ezhixuan.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>rabbitMq</title>
    <link href="https://www.ezhixuan.xyz/post/775b8c4e/"/>
    <id>https://www.ezhixuan.xyz/post/775b8c4e/</id>
    <published>2023-10-04T03:06:22.000Z</published>
    <updated>2023-10-04T03:06:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于mq"><a class="markdownIt-Anchor" href="#关于mq"></a> 关于MQ</h2><p>MQ，中文是消息队列，字面上是存放消息的队列，也是时间驱动架构中的Broker。</p><h3 id="同步调用与异步调用"><a class="markdownIt-Anchor" href="#同步调用与异步调用"></a> 同步调用与异步调用</h3><h4 id="同步调用"><a class="markdownIt-Anchor" href="#同步调用"></a> 同步调用</h4><p>优点：时效性较强，可以立即得到结果。</p><p>缺点：耦合度高，性能和吞吐能力较低，有额外的资源消耗，有级联失败问题。</p><h4 id="异步调用"><a class="markdownIt-Anchor" href="#异步调用"></a> 异步调用</h4><p>优点：服务解耦，性能提升，吞吐量提高，服务没有强依赖，不必担心级联失败问题，流量削峰。</p><p>缺点：依赖broker的可靠性、安全性、吞吐能力，架构更复杂，业务没有明显的流程线，不好追踪管理。</p><h3 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h3><p>同步的使用场景在于立即需要获取返回结果并使用，是比较常用的。</p><p>异步的使用场景在于不关心返回结果，只需要通知即可。</p><h3 id="实现框架"><a class="markdownIt-Anchor" href="#实现框架"></a> 实现框架</h3><table><thead><tr><th></th><th>RabbitMQ</th><th>ActiveMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>支持协议</td><td>AMQP，XMPP，SMTP，STOMP</td><td>OpenWire，STOMP，REST，XMPP，AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微妙级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><h2 id="rabbitmq"><a class="markdownIt-Anchor" href="#rabbitmq"></a> RabbitMQ</h2><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><p>可以直接通过指令拉取</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure><p>也可以通过下载安装包后安装</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker load -i 包名</span><br></pre></td></tr></table></figure><p>docker启动</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=ezhixuan \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123456 \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure><h3 id="导入依赖"><a class="markdownIt-Anchor" href="#导入依赖"></a> 导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置"><a class="markdownIt-Anchor" href="#添加配置"></a> 添加配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    username:  # 用户名</span><br><span class="line">    password:  # 密码</span><br><span class="line">    host:  # 主机</span><br><span class="line">    port:  # 端口</span><br><span class="line">    virtual-host:  # 虚拟主机</span><br></pre></td></tr></table></figure><h2 id="simplequeue"><a class="markdownIt-Anchor" href="#simplequeue"></a> SimpleQueue</h2><h3 id="发送模型"><a class="markdownIt-Anchor" href="#发送模型"></a> 发送模型</h3><p>publisher -&gt; queue -&gt; consumer</p><h3 id="publisher"><a class="markdownIt-Anchor" href="#publisher"></a> publisher</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span> <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rabbitPublisher</span><span class="params">()</span> &#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;mqdemo&quot;</span>, JSONUtil.toJsonStr(<span class="string">&quot;我是测试-普通信息发送&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="listener"><a class="markdownIt-Anchor" href="#listener"></a> listener</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqListener</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RabbitListener(queues = &quot;mqdemo&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simpleListener</span><span class="params">(String onMessage)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到一条消息&#123;&#125;&quot;</span>, onMessage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="workqueue"><a class="markdownIt-Anchor" href="#workqueue"></a> WorkQueue</h2><h3 id="发送模型-2"><a class="markdownIt-Anchor" href="#发送模型-2"></a> 发送模型</h3><p>publisher -&gt; queue -&gt; consumer</p><p>​-&gt;consumer</p><p>WorkQueue并不是一个新的队列，只是通过添加消费者来提高消息处理速度，来避免消息堆积。</p><p>它会将消息平均的分配给所有消费者，是因为rabbitMq的消息预取机制，消息到达队列时，消费者的通道会预先将消息抽取出，直到达到消费者允许的最大未确认消息数量。一旦未确认的消息数量达到了设置的预取值，RabbitMQ就停止传递更多消息，除非至少有一条未完成的消息得到了确认。</p><p>如果由两台性能一高一低的机器作为消费者，它们仍会通过消费预取来平分这些消息，尽管高性能的机器已经将消息处理完，也不会去拿低性能的机器的消息。</p><div class="tag-plugin image"><div class="image-bg"><img src="image-20230922100029004.png" alt="image-20230922100029004"></div><div class="image-meta"><span class="image-caption center">image-20230922100029004</span></div></div><p>可以消费者1很快就处理结束了，而消费者二等待了一段时间后才结束，但是它们处理的消息数量是相同的。</p><p>希望能够按能力分配我们可以到yml文件中配置消费预取限制</p><p>将prefetch改为1,即最大只能有一条未处理消息，只有处理完才能获取下一条消息，prefetch 默认是无上限。</p><div class="tag-plugin image"><div class="image-bg"><img src="image-20230922100949606.png" alt="image-20230922100949606"></div><div class="image-meta"><span class="image-caption center">image-20230922100949606</span></div></div><p>这样就极大优化了消息处理的效率</p><h3 id="publisher-2"><a class="markdownIt-Anchor" href="#publisher-2"></a> publisher</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">workQueue</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 发送50条消息</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;mqdemo&quot;</span>, JSONUtil.toJsonStr(<span class="string">&quot;我是测试-工作队列信息发送&quot;</span> + i));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="listener-2"><a class="markdownIt-Anchor" href="#listener-2"></a> listener</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;mqdemo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">workQueue1</span><span class="params">(String onMessage)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">  log.info(<span class="string">&quot;workQueue1接收到一条消息&#123;&#125;，&#123;&#125;&quot;</span>, onMessage, LocalDateTime.now());</span><br><span class="line">  Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;mqdemo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">workQueue2</span><span class="params">(String onMessage)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">  log.error(<span class="string">&quot;workQueue2接收到一条消息&#123;&#125;，&#123;&#125;&quot;</span>, onMessage, LocalDateTime.now());</span><br><span class="line">  Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发布订阅模型"><a class="markdownIt-Anchor" href="#发布订阅模型"></a> 发布订阅模型</h2><h3 id="发送模型-3"><a class="markdownIt-Anchor" href="#发送模型-3"></a> 发送模型</h3><p>发出的消息只能被一个消费者消费，因为一旦被消费就会从队列中被删除。</p><p>发布订阅模型允许将同一消息发送给多个消费者，通过exchange实现。</p><p>exchange只负责消息路由而不负责存储，路由失败则消息丢失</p><h2 id="fanout-exchange"><a class="markdownIt-Anchor" href="#fanout-exchange"></a> Fanout Exchange</h2><p>会将接收到的消息路由到每一个跟其绑定的queue</p><h3 id="config"><a class="markdownIt-Anchor" href="#config"></a> config</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.rabbitmqdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: rabbitMq-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 将队列与交换机绑定-rabbitMq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-22 10:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BindingQueue2Exchange</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// =================init Exchange=================</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> FanoutExchange <span class="title function_">ezhixuanFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;ezhixuan.fanout&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ==================init Queue=================</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ==================Binding=================</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange ezhixuanFanoutExchange)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(ezhixuanFanoutExchange);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange ezhixuanFanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(ezhixuanFanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="publisher-3"><a class="markdownIt-Anchor" href="#publisher-3"></a> publisher</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">fanout</span><span class="params">()</span> &#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;ezhixuan.fanout&quot;</span>, <span class="string">&quot;&quot;</span>, JSONUtil.toJsonStr(<span class="string">&quot;哈喽大家好，都看的到吗&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="listener-3"><a class="markdownIt-Anchor" href="#listener-3"></a> listener</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fanoutQueue1</span><span class="params">(String onMessage)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">  log.info(<span class="string">&quot;fanoutQueue1接收到一条消息&#123;&#125;，&#123;&#125;&quot;</span>, onMessage, LocalDateTime.now());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fanoutQueue2</span><span class="params">(String onMessage)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">  log.error(<span class="string">&quot;fanoutQueue2接收到一条消息&#123;&#125;，&#123;&#125;&quot;</span>, onMessage, LocalDateTime.now());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230922104637112.png" alt="image-20230922104637112"></div><div class="image-meta"><span class="image-caption center">image-20230922104637112</span></div></div><h2 id="direct-exchange"><a class="markdownIt-Anchor" href="#direct-exchange"></a> Direct Exchange</h2><p>Direct Exchange会将接收到的消息根据指定规则路由到指定的Queue，因此被称为路由模式</p><p>一个Queue的bindingkey是可以有多个的</p><h3 id="publisher-4"><a class="markdownIt-Anchor" href="#publisher-4"></a> publisher</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">direct</span><span class="params">()</span>&#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;ezhixuan.direct&quot;</span>, <span class="string">&quot;yellow&quot;</span>, JSONUtil.toJsonStr(<span class="string">&quot;yellow看到吗&quot;</span>));</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;ezhixuan.direct&quot;</span>, <span class="string">&quot;blue&quot;</span>, JSONUtil.toJsonStr(<span class="string">&quot;blue看到吗&quot;</span>));</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;ezhixuan.direct&quot;</span>, <span class="string">&quot;red&quot;</span>, JSONUtil.toJsonStr(<span class="string">&quot;red看到吗&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="listener-4"><a class="markdownIt-Anchor" href="#listener-4"></a> listener</h3><p>在fanout中使用的是通过config配置类来实现Queue的初始化以及绑定，但是这样是比较繁琐的，我们可以直接在listener注解上配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">      bindings =</span></span><br><span class="line"><span class="meta">          @QueueBinding(</span></span><br><span class="line"><span class="meta">              value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">              exchange = @Exchange(name = &quot;ezhixuan.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">              key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;))</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">directQueue1</span><span class="params">(String onMessage)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;directQueue1接收到一条消息&#123;&#125;，&#123;&#125;&quot;</span>, onMessage, LocalDateTime.now());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">      bindings =</span></span><br><span class="line"><span class="meta">          @QueueBinding(</span></span><br><span class="line"><span class="meta">              value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">              exchange = @Exchange(name = &quot;ezhixuan.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">              key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;))</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">directQueue2</span><span class="params">(String onMessage)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;directQueue2接收到一条消息&#123;&#125;，&#123;&#125;&quot;</span>, onMessage, LocalDateTime.now());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230922110851799.png" alt="image-20230922110851799"></div><div class="image-meta"><span class="image-caption center">image-20230922110851799</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230922110858777.png" alt="image-20230922110858777"></div><div class="image-meta"><span class="image-caption center">image-20230922110858777</span></div></div><h2 id="topic-exchange"><a class="markdownIt-Anchor" href="#topic-exchange"></a> Topic Exchange</h2><p>bindingkey必须是多个单词组成，单词之间由<code>.</code>连接</p><p>主要特点在于支持使用通配符</p><p>#：代表0个或者多个单词</p><p>*：代指一个单词</p><h3 id="publisher-5"><a class="markdownIt-Anchor" href="#publisher-5"></a> publisher</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">topic</span><span class="params">()</span> &#123;</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;ezhixuan.topic&quot;</span>, <span class="string">&quot;ezhixuan.wiki&quot;</span>, JSONUtil.toJsonStr(<span class="string">&quot;wiki上新了&quot;</span>));</span><br><span class="line">  rabbitTemplate.convertAndSend(<span class="string">&quot;ezhixuan.topic&quot;</span>, <span class="string">&quot;ezhixuan.note&quot;</span>, JSONUtil.toJsonStr(<span class="string">&quot;note上新了&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="listener-5"><a class="markdownIt-Anchor" href="#listener-5"></a> listener</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">      bindings =</span></span><br><span class="line"><span class="meta">          @QueueBinding(</span></span><br><span class="line"><span class="meta">              value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">              exchange = @Exchange(name = &quot;ezhixuan.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">              key = &quot;ezhixuan.#&quot;))</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">topicQueue1</span><span class="params">(String onMessage)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;topicQueue1接收到一条消息&#123;&#125;，&#123;&#125;&quot;</span>, onMessage, LocalDateTime.now());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">      bindings =</span></span><br><span class="line"><span class="meta">          @QueueBinding(</span></span><br><span class="line"><span class="meta">              value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">              exchange = @Exchange(name = &quot;ezhixuan.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">              key = &quot;ezhixuan.wiki&quot;))</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">topicQueue2</span><span class="params">(String onMessage)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;topicQueue2接收到一条消息&#123;&#125;，&#123;&#125;&quot;</span>, onMessage, LocalDateTime.now());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">      bindings =</span></span><br><span class="line"><span class="meta">          @QueueBinding(</span></span><br><span class="line"><span class="meta">              value = @Queue(name = &quot;topic.queue3&quot;),</span></span><br><span class="line"><span class="meta">              exchange = @Exchange(name = &quot;ezhixuan.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">              key = &quot;*.wiki&quot;))</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">topicQueue3</span><span class="params">(String onMessage)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;topicQueue3接收到一条消息&#123;&#125;，&#123;&#125;&quot;</span>, onMessage, LocalDateTime.now());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230922112127588.png" alt="image-20230922112127588"></div><div class="image-meta"><span class="image-caption center">image-20230922112127588</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230922112136108.png" alt="image-20230922112136108"></div><div class="image-meta"><span class="image-caption center">image-20230922112136108</span></div></div><h2 id="消息转换器"><a class="markdownIt-Anchor" href="#消息转换器"></a> 消息转换器</h2><div class="tag-plugin image"><div class="image-bg"><img src="image-20230922113603695.png" alt="image-20230922113603695"></div><div class="image-meta"><span class="image-caption center">image-20230922113603695</span></div></div><p>由于springamqp默认使用的是jdk的序列化器，在消息的转换上会占用更多字节，影响速度，推荐修改为json的序列化器。</p><p>我个人习惯使用hutool的对象转换即上文发送消息的JSONUtil转换也是可以实现的</p><div class="tag-plugin image"><div class="image-bg"><img src="image-20230922113827953.png" alt="image-20230922113827953"></div><div class="image-meta"><span class="image-caption center">image-20230922113827953</span></div></div><p>也可以通过以下方法来实现</p><h3 id="导入依赖-2"><a class="markdownIt-Anchor" href="#导入依赖-2"></a> 导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--发送消息转换器所需依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--接收消息转换器所需依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改配置"><a class="markdownIt-Anchor" href="#修改配置"></a> 修改配置</h3><p>可以在启动类直接配置，也可以在config创建配置。</p><p>注意这里需要导的是org.springframework.amqp.support.converter.MessageConverter的MessageConverter</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.rabbitmqdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMqDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20231004111035847.png" alt="image-20231004111035847"></div><div class="image-meta"><span class="image-caption center">image-20231004111035847</span></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;关于mq&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于mq&quot;&gt;&lt;/a&gt; 关于MQ&lt;/h2&gt;
&lt;p&gt;MQ，中文是消息队列，字面上是存放消息的队列，也是时间驱动架构中的Broker。&lt;/p&gt;
&lt;h3</summary>
        
      
    
    
    
    
    <category term="mq" scheme="https://www.ezhixuan.xyz/tags/mq/"/>
    
    <category term="rabbitMq" scheme="https://www.ezhixuan.xyz/tags/rabbitMq/"/>
    
  </entry>
  
  <entry>
    <title>springSecurity</title>
    <link href="https://www.ezhixuan.xyz/post/b04a945b/"/>
    <id>https://www.ezhixuan.xyz/post/b04a945b/</id>
    <published>2023-09-27T07:54:56.000Z</published>
    <updated>2023-09-27T07:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p><strong>springSecurity</strong>是Spring家族中的安全管理框架。相比另一个安全框架<strong>Shiro</strong>，它提供了更丰富的功能，以及更丰富的社区资源。</p><p>一般来说中大型企业都是使用<strong>SpringSecurity</strong>来做安全框架。小项目使用<strong>Shiro</strong>较多，相对来说，Shiro的上手更加简单</p><p>一般Web应用需要进行<strong>认证</strong>和<strong>授权</strong></p><p>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</p><p>授权：经过认证后判断当前用户是否有权限进行某个操作</p><p>认证和授权也是springSecurity的作为安全框架的核心功能</p><h2 id="导入springsecurity"><a class="markdownIt-Anchor" href="#导入springsecurity"></a> 导入springSecurity</h2><p>导入起步依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springSecurity--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当初次引入该依赖并启动后，会被强制跳转到登录验证界面，默认用户名是<code>user</code>,密码会在后端控制台提供。</p><hr><p>简单使用过后，这里开始下文记录一些常规使用方法</p><h3 id="pom文件"><a class="markdownIt-Anchor" href="#pom文件"></a> Pom文件</h3><p>技术选型如下所示</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringSecurityDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringSecurityDemo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springWeb--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springSecurity--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--json--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jwt依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatisPlus--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springbootTest--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--fastJson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--hutool--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里使用的是springboot2.7.10，hutool是一个比较好用的工具包，本篇中仅使用于将Object转换为JSON类型的字符串，可根据自己喜好自行切换。当然也可能会有疑问说如果只是转换类型使用fastJson不是一样可以实现吗，在这里由于本人技术水平有限，使用fastJson在进行转换时报错，尽管更换新版本一样没能解决问题，判断问题在于因为返回包含request或response，没有进行忽略序列化，由于一些原因，fastJson无法对其进行正常序列化</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">todofastJson报错</span><br></pre></td></tr></table></figure><h3 id="applicationyml"><a class="markdownIt-Anchor" href="#applicationyml"></a> Application.yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/security?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">zyx</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h3 id="db"><a class="markdownIt-Anchor" href="#db"></a> DB</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> Navicat Premium Data Transfer</span><br><span class="line"></span><br><span class="line"> Source Server         : 本地</span><br><span class="line"> Source Server Type    : MySQL</span><br><span class="line"> Source Server Version : 80031 (8.0.31)</span><br><span class="line"> Source Host           : localhost:3306</span><br><span class="line"> Source Schema         : security</span><br><span class="line"></span><br><span class="line"> Target Server Type    : MySQL</span><br><span class="line"> Target Server Version : 80031 (8.0.31)</span><br><span class="line"> File Encoding         : 65001</span><br><span class="line"></span><br><span class="line"> Date: 26/09/2023 20:53:17</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_menu`;</span><br><span class="line">CREATE TABLE `sys_menu`  (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `menu_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;菜单名&#x27;,</span><br><span class="line">  `path` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;路由地址&#x27;,</span><br><span class="line">  `component` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;组件路径&#x27;,</span><br><span class="line">  `visible` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;菜单状态（0显示 1隐藏）&#x27;,</span><br><span class="line">  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;菜单状态（0正常 1停用）&#x27;,</span><br><span class="line">  `perms` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;权限标识&#x27;,</span><br><span class="line">  `icon` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;#&#x27; COMMENT &#x27;菜单图标&#x27;,</span><br><span class="line">  `create_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `create_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `update_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `del_flag` int NULL DEFAULT 0 COMMENT &#x27;是否删除（0未删除 1已删除）&#x27;,</span><br><span class="line">  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;备注&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = &#x27;菜单表&#x27; ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_menu` VALUES (1, &#x27;all&#x27;, &#x27;sys&#x27;, &#x27;sys/test/index&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;sys:test:list&#x27;, &#x27;#&#x27;, NULL, NULL, NULL, NULL, 0, NULL);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_role`;</span><br><span class="line">CREATE TABLE `sys_role`  (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `role_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;角色权限字符串&#x27;,</span><br><span class="line">  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;角色状态（0正常 1停用）&#x27;,</span><br><span class="line">  `del_flag` int NULL DEFAULT 0 COMMENT &#x27;del_flag&#x27;,</span><br><span class="line">  `create_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `create_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `update_by` bigint NULL DEFAULT NULL,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL,</span><br><span class="line">  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;备注&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = &#x27;角色表&#x27; ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_role` VALUES (1, &#x27;superManager&#x27;, &#x27;super&#x27;, &#x27;0&#x27;, 0, NULL, NULL, NULL, NULL, NULL);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_role_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_role_menu`;</span><br><span class="line">CREATE TABLE `sys_role_menu`  (</span><br><span class="line">  `role_id` bigint NOT NULL AUTO_INCREMENT COMMENT &#x27;角色ID&#x27;,</span><br><span class="line">  `menu_id` bigint NOT NULL DEFAULT 0 COMMENT &#x27;菜单id&#x27;,</span><br><span class="line">  PRIMARY KEY (`role_id`, `menu_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_role_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_role_menu` VALUES (1, 1);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_user`;</span><br><span class="line">CREATE TABLE `sys_user`  (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `user_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;用户名&#x27;,</span><br><span class="line">  `nick_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;昵称&#x27;,</span><br><span class="line">  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;账号状态（0正常 1停用）&#x27;,</span><br><span class="line">  `email` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">  `phonenumber` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;手机号&#x27;,</span><br><span class="line">  `sex` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;用户性别（0男，1女，2未知）&#x27;,</span><br><span class="line">  `avatar` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;头像&#x27;,</span><br><span class="line">  `user_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;用户类型（0管理员，1普通用户）&#x27;,</span><br><span class="line">  `create_by` bigint NULL DEFAULT NULL COMMENT &#x27;创建人的用户id&#x27;,</span><br><span class="line">  `create_time` datetime NULL DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_by` bigint NULL DEFAULT NULL COMMENT &#x27;更新人&#x27;,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  `del_flag` int NULL DEFAULT 0 COMMENT &#x27;删除标志（0代表未删除，1代表已删除）&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = &#x27;用户表&#x27; ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_user` VALUES (1, &#x27;ezhixuan&#x27;, &#x27;一只轩呐&#x27;, &#x27;$2a$10$ukg69WWLQ4KwJGmePwgU6edIJG/qXDShraMp9ZBCTm8M0VcrBpc26&#x27;, &#x27;0&#x27;, NULL, NULL, NULL, NULL, &#x27;1&#x27;, NULL, NULL, NULL, NULL, 0);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for sys_user_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_user_role`;</span><br><span class="line">CREATE TABLE `sys_user_role`  (</span><br><span class="line">  `user_id` bigint NOT NULL AUTO_INCREMENT COMMENT &#x27;用户id&#x27;,</span><br><span class="line">  `role_id` bigint NOT NULL DEFAULT 0 COMMENT &#x27;角色id&#x27;,</span><br><span class="line">  PRIMARY KEY (`user_id`, `role_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_user_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_user_role` VALUES (1, 1);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="认证"><a class="markdownIt-Anchor" href="#认证"></a> 认证</h2><p>首先来看一个简单的登录验证流程</p><img src="image-20230926211548735.png" alt="image-20230926211548735" style="zoom: 67%;"><p>那么springSecurity的登录流程是什么样的呢</p><p>SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。</p><div class="tag-plugin image"><div class="image-bg"><img src="image-20211214144425527.png" alt="image-20211214144425527"></div><div class="image-meta"><span class="image-caption center">image-20211214144425527</span></div></div><p>图中只展示了核心过滤器，其它的非核心过滤器并没有在图中展示。</p><p><strong>UsernamePasswordAuthenticationFilter</strong>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p><p>**ExceptionTranslationFilter：**处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。</p><p>**FilterSecurityInterceptor：**负责权限校验的过滤器。</p><p>我们可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。</p><div class="tag-plugin image"><div class="image-bg"><img src="image-20230926212242648.png" alt="image-20230926212242648"></div><div class="image-meta"><span class="image-caption center">image-20230926212242648</span></div></div><h3 id="认证流程详解"><a class="markdownIt-Anchor" href="#认证流程详解"></a> 认证流程详解</h3><div class="tag-plugin image"><div class="image-bg"><img src="image-20211214151515385.png" alt="image-20211214151515385"></div><div class="image-meta"><span class="image-caption center">image-20211214151515385</span></div></div><p>概念速查:</p><p>Authentication接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p><p>AuthenticationManager接口：定义了认证Authentication的方法</p><p>UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。</p><p>UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</p><hr><h3 id="userdetailsserviceimpl"><a class="markdownIt-Anchor" href="#userdetailsserviceimpl"></a> UserDetailsServiceImpl</h3><p><code>UserDetailsService</code>是SpringSecurity提供的一个接口，用于根据用户名获取用户信息，需要<code>自己实现</code>loadUserByUsername方法</p><p>首先我们需要定义一个方法来实现UserDetailsService接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.domain.entitiy.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.domain.entitiy.User;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.mapper.MenuMapper;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-25 21:15</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MenuMapper menuMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUserName, username));</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询用户权限</span></span><br><span class="line">        List&lt;String&gt; permissions = menuMapper.selectPermsByUserId(user.getId());</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user,permissions);</span><br><span class="line">        <span class="keyword">return</span> loginUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要流程为：</p><ol><li>查询用户信息</li><li>查询用户权限</li><li>封装进UserDetails实现类中返回</li></ol><p>同时，由于该方法的返回值是<strong>UserDetails</strong>，所以我们需要自行定义一个类实现UserDetails</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.domain.entitiy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-25 21:24</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储权限信息</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissions;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginUser</span><span class="params">(User user, List&lt;String&gt; permissions)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.permissions = permissions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储SpringSecurity所需要的权限信息的集合</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span>  Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">if</span>(authorities!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> authorities;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把permissions中字符串类型的权限信息转换成GrantedAuthority对象存入authorities中</span></span><br><span class="line">        authorities = permissions.stream().</span><br><span class="line">                map(SimpleGrantedAuthority::<span class="keyword">new</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的注意点为：</p><ul><li>不需要使用@AllArgsConstructor，authorities需要后续通过方法填充。</li></ul><p>此时进行测试会出现报错</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2023</span>-09-<span class="number">25</span> <span class="number">21</span>:<span class="number">30</span>:<span class="number">36.084</span> ERROR <span class="number">27868</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">6</span>] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() <span class="keyword">for</span> servlet [dispatcherServlet] in context with path [] threw exception</span><br><span class="line"></span><br><span class="line">java.lang.IllegalArgumentException: There is no PasswordEncoder mapped <span class="keyword">for</span> the id <span class="string">&quot;null&quot;</span></span><br><span class="line">at org.springframework.security.crypto.password.DelegatingPasswordEncoder$UnmappedIdPasswordEncoder.matches(DelegatingPasswordEncoder.java:<span class="number">289</span>) ~[spring-security-crypto-<span class="number">5.7</span><span class="number">.7</span>.jar:<span class="number">5.7</span><span class="number">.7</span>]</span><br><span class="line">at org.springframework.security.crypto.password.DelegatingPasswordEncoder.matches(DelegatingPasswordEncoder.java:<span class="number">237</span>) ~[spring-security-crypto-<span class="number">5.7</span><span class="number">.7</span>.jar:<span class="number">5.7</span><span class="number">.7</span>]</span><br><span class="line">at org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(DaoAuthenticationProvider.java:<span class="number">77</span>) ~[spring-security-core-<span class="number">5.7</span><span class="number">.7</span>.jar:<span class="number">5.7</span><span class="number">.7</span>]</span><br><span class="line">at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里是密码的问题，后续修改即可，因为还没有进行相应配置修改，只需要在数据库中的密码前面加上**{noop}**即可实际项目中我们不会把密码明文存储在数据库中。</p><p>默认使用的PasswordEncoder要求数据库中的密码格式为：<strong>{id}password</strong> 。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就<strong>需要替换PasswordEncoder</strong>。</p><p>我们一般使用SpringSecurity为我们提供的<strong>BCryptPasswordEncoder</strong>。我们只需要使用把BCryptPasswordEncoder对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验。</p><p>在之前是定义一个SpringSecurity的配置类，SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapter。</p><p>在我现在用的2.7.10版本，这个类已经被遗弃了，直接配置一个PasswordEncoder的bean就好了, 不用继承它</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-25 23:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 密码加密</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="登录接口"><a class="markdownIt-Anchor" href="#登录接口"></a> 登录接口</h3><h4 id="controller"><a class="markdownIt-Anchor" href="#controller"></a> controller</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.domain.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.domain.entitiy.User;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.service.LoginService;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 登录控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-26 08:09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginService.login(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> &#123; <span class="keyword">return</span> loginService.logout();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="impl"><a class="markdownIt-Anchor" href="#impl"></a> Impl</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-26 08:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span> <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span> <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户登录</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="comment">// 1. 通过authenticationManager进行登录验证</span></span><br><span class="line">    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">token</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(), user.getPassword());</span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(token);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(authenticate)) &#123;</span><br><span class="line">      <span class="comment">// 2. 如果验证失败，抛出异常</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 如果验证成功，将用户信息存入redis中</span></span><br><span class="line">    <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">    <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line">    redisCache.setCacheObject(<span class="string">&quot;login:&quot;</span> + userId, loginUser);</span><br><span class="line">    <span class="comment">// 4. 将token返回给前端</span></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;token&quot;</span>, jwt);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>, <span class="string">&quot;登录成功&quot;</span>, map);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要流程为：</p><ol><li>通过authenticationManager进行登录验证</li><li>从Principal中取出用户信息</li><li>生成JWT返回给前端</li></ol><p>这里需要使用注入authenticationManger，一样在配置类中注入Bean即可。并且需要放开login接口</p><h4 id="springsecurity配置类"><a class="markdownIt-Anchor" href="#springsecurity配置类"></a> springSecurity配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.filter.JWTAuthenticationTokenFilter;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-25 23:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span> <span class="keyword">private</span> JWTAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line">  <span class="meta">@Resource</span> <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line">  <span class="meta">@Resource</span> <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line">  <span class="meta">@Resource</span> <span class="keyword">private</span> AuthenticationSuccessHandler authenticationSuccessHandler;</span><br><span class="line">  <span class="meta">@Resource</span> <span class="keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler;</span><br><span class="line">  <span class="meta">@Resource</span> <span class="keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 密码加密</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 过滤器链配置</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http <span class="comment">// 关闭csrf</span></span><br><span class="line">        .csrf()</span><br><span class="line">        .disable()</span><br><span class="line">        <span class="comment">// 不通过Session获取SecurityContext</span></span><br><span class="line">        .sessionManagement()</span><br><span class="line">        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">        .and()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">        .anonymous()</span><br><span class="line">        <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">        .anyRequest()</span><br><span class="line">        .authenticated();</span><br><span class="line">    <span class="comment">// 添加token校验过滤器到过滤器链中</span></span><br><span class="line">    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    <span class="comment">// 添加自定义异常处理器</span></span><br><span class="line">    http.exceptionHandling()</span><br><span class="line">        .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">        .authenticationEntryPoint(authenticationEntryPoint);</span><br><span class="line">    <span class="comment">// 添加允许跨域</span></span><br><span class="line">    http.cors();</span><br><span class="line">    <span class="comment">// 添加自定义处理器</span></span><br><span class="line">    http.formLogin().successHandler(authenticationSuccessHandler).failureHandler(authenticationFailureHandler);</span><br><span class="line">    http.logout().logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">    <span class="keyword">return</span> http.build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取AuthenticationManager（认证管理器），登录时认证使用</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> authenticationConfiguration</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(</span></span><br><span class="line"><span class="params">      AuthenticationConfiguration authenticationConfiguration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="登出接口"><a class="markdownIt-Anchor" href="#登出接口"></a> 登出接口</h3><h4 id="controller-2"><a class="markdownIt-Anchor" href="#controller-2"></a> controller</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> &#123; <span class="keyword">return</span> loginService.logout();&#125;</span><br></pre></td></tr></table></figure><h4 id="impl-2"><a class="markdownIt-Anchor" href="#impl-2"></a> Impl</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.domain.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.domain.entitiy.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.domain.entitiy.User;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.service.LoginService;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.utils.RedisCache;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-26 08:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span> <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span> <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户登录</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 通过authenticationManager进行登录验证</span></span><br><span class="line">    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">token</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(), user.getPassword());</span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(token);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(authenticate)) &#123;</span><br><span class="line">      <span class="comment">// 2. 如果验证失败，抛出异常</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 如果验证成功，将用户信息存入redis中</span></span><br><span class="line">    <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">    <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line">    redisCache.setCacheObject(<span class="string">&quot;login:&quot;</span> + userId, loginUser);</span><br><span class="line">    <span class="comment">// 4. 将token返回给前端</span></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;token&quot;</span>, jwt);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>, <span class="string">&quot;登录成功&quot;</span>, map);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户退出</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 从contextHolder中获取loginUser信息</span></span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">    <span class="comment">// 2. 到redis中删除对应User的信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">    redisCache.deleteObject(<span class="string">&quot;login:&quot;</span> + userId);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">200</span>, <span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要流程为：</p><ul><li>从contextHolder中获取loginUser信息</li><li>到redis中删除对应User的信息</li></ul><h4 id="jwtauthenticationtokenfilter"><a class="markdownIt-Anchor" href="#jwtauthenticationtokenfilter"></a> JWTAuthenticationTokenFilter</h4><p>这里的contextHolder本质上是一个ThreadLocal，但是我们为什么能够从里面获取用户信息呢</p><p>是因为我们自行添加了一个filter来过滤请求获取用户信息并存入SecurityContextHolder中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.domain.entitiy.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.utils.RedisCache;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 校验JWT是否有效</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-26 09:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span> <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 获取token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasText(token)) &#123;</span><br><span class="line">      <span class="comment">// token 不存在</span></span><br><span class="line">      filterChain.doFilter(request, response);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// token 存在</span></span><br><span class="line">    <span class="comment">// 2. 解析token</span></span><br><span class="line">    String userId;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">      userId = claims.getSubject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;token非法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 从redis中获取用户信息</span></span><br><span class="line">    <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> redisCache.getCacheObject(<span class="string">&quot;login:&quot;</span> + userId);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(loginUser))&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 存入SecurityContextHolder</span></span><br><span class="line">    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(loginUser, <span class="literal">null</span>, loginUser.getAuthorities());</span><br><span class="line">    SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">    <span class="comment">// 5. 放行</span></span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里没有去实现filter而是继承OncePerRequestFilter，是因为实现filter可能出现的一种原因就是因为在请求执行完之后浏览器会再发一次请求.ico的请求，所以这里使用Spring实现的OncePerRequestFilter。</p><p>同时这里还需要将过滤器位置置于UsernamePasswordAuthenticationFilter之前</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http <span class="comment">// 关闭csrf</span></span><br><span class="line">        .csrf()</span><br><span class="line">        .disable()</span><br><span class="line">        <span class="comment">// 不通过Session获取SecurityContext</span></span><br><span class="line">        .sessionManagement()</span><br><span class="line">        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">        .and()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">        .anonymous()</span><br><span class="line">        <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">        .anyRequest()</span><br><span class="line">        .authenticated();</span><br><span class="line">      ==================================================</span><br><span class="line">    <span class="comment">// 添加token校验过滤器到过滤器链中</span></span><br><span class="line">    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    =====================================================</span><br><span class="line">      <span class="comment">// 添加自定义异常处理器</span></span><br><span class="line">    http.exceptionHandling()</span><br><span class="line">        .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">        .authenticationEntryPoint(authenticationEntryPoint);</span><br><span class="line">      <span class="comment">// 添加允许跨域</span></span><br><span class="line">    http.cors();</span><br><span class="line">      <span class="comment">// 添加自定义处理器</span></span><br><span class="line">    http.formLogin().successHandler(authenticationSuccessHandler).failureHandler(authenticationFailureHandler);</span><br><span class="line">    http.logout().logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">    <span class="keyword">return</span> http.build();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这样就能够实现如果<strong>请求没有携带Token就放行</strong>给后面的过滤器链处理，如果请求<strong>携带了Token则会解析Token信息</strong>，并将解析出的信息<strong>存入SecurityContextHolder</strong>中。</p><p>至此，认证环节基本结束。接下来则是授权的阶段</p><hr><h2 id="授权"><a class="markdownIt-Anchor" href="#授权"></a> 授权</h2><p>例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</p><p>总结起来就是<strong>不同的用户可以使用不同的功能</strong>。这就是权限系统要去实现的效果。</p><p>我们不能只依赖前端去判断用户的权限来选择显示哪些菜单哪些按钮。因为如果只是这样，如果有人知道了对应功能的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。</p><p>所以我们还需要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须具有所需权限才能进行相应的操作。</p><p>说到授权，就不得不提<strong>RBAC权限模型</strong></p><h3 id="rbac权限模型"><a class="markdownIt-Anchor" href="#rbac权限模型"></a> RBAC权限模型</h3><p>RBAC权限模型（Role-Based Access Control）即：基于角色的权限控制。这是目前最常被开发者使用也是相对易用、通用权限模型。</p><p>在RBAC模型里面，有三个基础组成部分，分别是用户、角色和权限。</p><p>RBAC通过定义角色的权限，并对用户授予某个角色从而来控制用户的权限，实现用户和权限的逻辑分离（区别于ACL模型），极大方便了权限的管理。</p><p>RBAC模型中的一些名词：</p><ul><li>User（用户）：每个用户都有唯一的UID识别，并被授予不同的角色；</li><li>Role（角色）：不同角色具有不同权限；</li><li>Permission（权限）：访问权限；</li><li>用户-角色映射：用户和角色之间的映射关系；</li><li>角色-权限映射：角色和权限之间的映射关系。</li></ul><div class="tag-plugin image"><div class="image-bg"><img src="image-20230927144114944.png" alt="image-20230927144114944"></div><div class="image-meta"><span class="image-caption center">image-20230927144114944</span></div></div><h3 id="限制接口访问权限"><a class="markdownIt-Anchor" href="#限制接口访问权限"></a> 限制接口访问权限</h3><p>要限制接口访问权限有两种方法，一种是通过配置类中去设置，这里采用更方便的注解来配置。</p><p>首先，需要开启相关配置，我们直接去配置类上方添加<code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code>具体配置看上文认证给出的配置类，开启之后给接口上添加<code>@PreAuthorize(&quot;hasAuthority('xxx')&quot;)</code>注解xxx表示权限</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: SpringSecurity控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-25 17:56</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;sys:test:list&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demoTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SpringSecurity还为我们提供了其它方法例如：hasAnyAuthority，hasRole，hasAnyRole等。比较常用的就是hasAuthority方法，它内部其实是调用authentication的getAuthorities方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p><p>hasAnyAuthority方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;,&#x27;test&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">demoTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>hasRole要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">demoTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>hasAnyRole 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@PreAuthorize(&quot;hasAnyRole(&#x27;admin&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">demoTest</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>而用户所有的权限在上文的UserDetailsServiceImpl中从menuMapper中获取并存入loginUser中，并且由JWTAuthenticationTokenFilter取出并授权给用户，此时拥有接口对应权限的用户才能访问对应接口。</p><p>这里贴出menuMapper的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.domain.entitiy.Menu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Menu&gt; &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ezhixuan.springSecurityDemo.mapper.MenuMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPermsByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">        SELECT DISTINCT m.perms</span><br><span class="line">        FROM sys_user_role AS ur</span><br><span class="line">                 LEFT JOIN</span><br><span class="line">             sys_role AS r</span><br><span class="line">             ON</span><br><span class="line">                 ur.role_id = r.id</span><br><span class="line">                 LEFT JOIN</span><br><span class="line">             sys_role_menu AS rm</span><br><span class="line">             ON</span><br><span class="line">                 r.id = rm.role_id</span><br><span class="line">                 LEFT JOIN</span><br><span class="line">             sys_menu AS m</span><br><span class="line">             ON</span><br><span class="line">                 rm.menu_id = m.id</span><br><span class="line">        WHERE ur.user_id = #&#123;userid&#125;</span><br><span class="line">          AND r.`status` = 0</span><br><span class="line">          AND m.`status` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，授权环节基本结束。</p><hr><h2 id="自定义异常返回"><a class="markdownIt-Anchor" href="#自定义异常返回"></a> 自定义异常返回</h2><p>由于springSecurity内部的返回并不能满足我们的Result需要，所以我们可以自定义异常返回</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.domain.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.utils.WebUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义异常处理机制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-26 15:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(</span></span><br><span class="line"><span class="params">      HttpServletRequest request,</span></span><br><span class="line"><span class="params">      HttpServletResponse response,</span></span><br><span class="line"><span class="params">      AccessDeniedException accessDeniedException)</span></span><br><span class="line">      <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(HttpStatus.FORBIDDEN.value(), <span class="string">&quot;权限不足&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(result);</span><br><span class="line">    WebUtils.renderString(response, jsonStr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.domain.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.springSecurityDemo.utils.WebUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义异常处理机制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-26 15:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(</span></span><br><span class="line"><span class="params">      HttpServletRequest request,</span></span><br><span class="line"><span class="params">      HttpServletResponse response,</span></span><br><span class="line"><span class="params">      AuthenticationException authException)</span></span><br><span class="line">      <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(HttpStatus.UNAUTHORIZED.value(), <span class="string">&quot;认证失败请重新登录&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(result);</span><br><span class="line">    <span class="comment">// String jsonStr = JSON.toJSONString(request); fastjson由于数组中携带有Request或者Response对象，无法正常序列化</span></span><br><span class="line">    WebUtils.renderString(response, jsonStr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常会被ExceptionTranslationFilter捕获到。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常。</p><p>如果是认证过程中出现的异常会被封装成AuthenticationException然后调用<strong>AuthenticationEntryPoint</strong>对象的方法去进行异常处理。</p><p>如果是授权过程中出现的异常会被封装成AccessDeniedException然后调用<strong>AccessDeniedHandler</strong>对象的方法去进行异常处理。</p><p>所以如果我们需要自定义异常处理，我们只需要自定义AuthenticationEntryPoint和AccessDeniedHandler然后配置给SpringSecurity即可。</p><p>WebUtils是对response进行处理的工具</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">renderString</span><span class="params">(HttpServletResponse response, String string)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置给SpringSecurity</p><p>先注入对应的处理器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br></pre></td></tr></table></figure><p>然后我们可以使用HttpSecurity对象的方法去配置。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint).</span><br><span class="line">        accessDeniedHandler(accessDeniedHandler);</span><br></pre></td></tr></table></figure><p>具体看上文springSecurity配置类</p><h2 id="跨域"><a class="markdownIt-Anchor" href="#跨域"></a> 跨域</h2><p>具体跨域问题我也记录过一篇文章</p><div class="tag-plugin link dis-select"><a class="link-card rich" title href="https://www.ezhixuan.xyz/post/7830183e/" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="title,icon,desc"><div class="top"><div class="lazy img" data-bg="https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.4/link/8f277b4ee0ecd.svg"></div><span class="cap link fs12">https://www.ezhixuan.xyz/post/7830183e/</span></div><div class="bottom"><span class="title">https://www.ezhixuan.xyz/post/7830183e/</span><span class="cap desc fs12"></span></div></a></div><p>先对SpringBoot配置，运行跨域请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">      <span class="comment">// 设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启SpringSecurity的跨域访问</p><p>由于我们的资源都会收到SpringSecurity的保护，所以想要跨域访问还要让SpringSecurity运行跨域访问。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http <span class="comment">// 关闭csrf</span></span><br><span class="line">        .csrf()</span><br><span class="line">        .disable()</span><br><span class="line">        <span class="comment">// 不通过Session获取SecurityContext</span></span><br><span class="line">        .sessionManagement()</span><br><span class="line">        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">        .and()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">        .anonymous()</span><br><span class="line">        <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">        .anyRequest()</span><br><span class="line">        .authenticated();</span><br><span class="line">    <span class="comment">// 添加token校验过滤器到过滤器链中</span></span><br><span class="line">    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    <span class="comment">// 添加自定义异常处理器</span></span><br><span class="line">    http.exceptionHandling()</span><br><span class="line">        .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">        .authenticationEntryPoint(authenticationEntryPoint);</span><br><span class="line">      ===============================================</span><br><span class="line">    <span class="comment">// 添加允许跨域</span></span><br><span class="line">    http.cors();</span><br><span class="line">            ===============================================</span><br><span class="line">    <span class="comment">// 添加自定义处理器</span></span><br><span class="line">    http.formLogin().successHandler(authenticationSuccessHandler).failureHandler(authenticationFailureHandler);</span><br><span class="line">    http.logout().logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">    <span class="keyword">return</span> http.build();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="自定义处理器"><a class="markdownIt-Anchor" href="#自定义处理器"></a> 自定义处理器</h2><h3 id="登录成功处理器"><a class="markdownIt-Anchor" href="#登录成功处理器"></a> 登录成功处理器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 登录成功处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-27 15:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationSuccessHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="登录失败处理器"><a class="markdownIt-Anchor" href="#登录失败处理器"></a> 登录失败处理器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 登录失败处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-27 15:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationFailureHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="退出成功处理器"><a class="markdownIt-Anchor" href="#退出成功处理器"></a> 退出成功处理器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.springSecurityDemo.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: SpringSecurityDemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 退出成功处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-27 15:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogoutSuccessHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="config"><a class="markdownIt-Anchor" href="#config"></a> config</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http <span class="comment">// 关闭csrf</span></span><br><span class="line">        .csrf()</span><br><span class="line">        .disable()</span><br><span class="line">        <span class="comment">// 不通过Session获取SecurityContext</span></span><br><span class="line">        .sessionManagement()</span><br><span class="line">        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">        .and()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">        .anonymous()</span><br><span class="line">        <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">        .anyRequest()</span><br><span class="line">        .authenticated();</span><br><span class="line">    <span class="comment">// 添加token校验过滤器到过滤器链中</span></span><br><span class="line">    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    <span class="comment">// 添加自定义异常处理器</span></span><br><span class="line">    http.exceptionHandling()</span><br><span class="line">        .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">        .authenticationEntryPoint(authenticationEntryPoint);</span><br><span class="line">    <span class="comment">// 添加允许跨域</span></span><br><span class="line">    http.cors();</span><br><span class="line">      ====================================</span><br><span class="line">    <span class="comment">// 添加自定义处理器</span></span><br><span class="line">    http.formLogin().successHandler(authenticationSuccessHandler).failureHandler(authenticationFailureHandler);</span><br><span class="line">    http.logout().logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">           ====================================</span><br><span class="line">    <span class="keyword">return</span> http.build();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">认证和授权</summary>
    
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/categories/java/"/>
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/tags/java/"/>
    
    <category term="spring" scheme="https://www.ezhixuan.xyz/tags/spring/"/>
    
    <category term="sercurity" scheme="https://www.ezhixuan.xyz/tags/sercurity/"/>
    
  </entry>
  
</feed>
