<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ezhixuan</title>
  <icon>https://www.ezhixuan.xyz/icon/android-chrome-192x192.png</icon>
  <subtitle>我们都要努力成为更好的自己 | 如果遇到了，就记录下来</subtitle>
  <link href="https://www.ezhixuan.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.ezhixuan.xyz/"/>
  <updated>2023-09-05T05:20:14.000Z</updated>
  <id>https://www.ezhixuan.xyz/</id>
  
  <author>
    <name>Ezhixuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo文章图片显示</title>
    <link href="https://www.ezhixuan.xyz/post/528f971c/"/>
    <id>https://www.ezhixuan.xyz/post/528f971c/</id>
    <published>2023-09-05T05:20:14.000Z</published>
    <updated>2023-09-05T05:20:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>配置<br>直接进入到你hexo的目录，右键打开git bash命令行，执行npm install hexo-asset-image –save</p><p>接着node_modules -&gt; hexo-asset-image -&gt; index.js</p><p>第58行找到，或者直接全局搜索也行</p><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_1" value="$(this).attr(src, config.root + link + src);"><button class="copy-btn" onclick="util.copy(&quot;copy_1&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewbox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"/></svg></button></div><p>修改为</p><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_2" value="$(this).attr(src, src);"><button class="copy-btn" onclick="util.copy(&quot;copy_2&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewbox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"/></svg></button></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230905132247109.png" alt="image-20230905132247109"></div><div class="image-meta"><span class="image-caption center">image-20230905132247109</span></div></div><p>然后在hexo目录的_config.yml配置文件中设置</p><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_3" value="post_asset_folder: true"><button class="copy-btn" onclick="util.copy(&quot;copy_3&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewbox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"/></svg></button></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230905132432534.png" alt="image-20230905132432534"></div><div class="image-meta"><span class="image-caption center">image-20230905132432534</span></div></div><p>每次生成new 一篇文章的时候会自动再同目录下生成相同名的文件夹，该文件夹下存放你的图片地址</p><p>如果使用typora软件的话，进行如下配置，在插入图片时会自动插入到同名文件夹下</p><div class="tag-plugin image"><div class="image-bg"><img src="image-20230905132639300.png" alt="image-20230905132639300"></div><div class="image-meta"><span class="image-caption center">image-20230905132639300</span></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;配置&lt;br&gt;
直接进入到你hexo的目录，右键打开git bash命令行，执行npm install hexo-asset-image –save&lt;/p&gt;
&lt;p&gt;接着node_modules -&amp;gt; hexo-asset-image -&amp;gt;</summary>
        
      
    
    
    
    
    <category term="hexo" scheme="https://www.ezhixuan.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Knife4j</title>
    <link href="https://www.ezhixuan.xyz/post/3ba05f4e/"/>
    <id>https://www.ezhixuan.xyz/post/3ba05f4e/</id>
    <published>2023-09-05T01:04:48.000Z</published>
    <updated>2023-09-05T01:04:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="knife4j"><a class="markdownIt-Anchor" href="#knife4j"></a> Knife4j</h2><p>是日常开发中很常用的框架，基于此框架，后端可以和前端开发人员进行高效沟通。</p><p>详细使用可以参考官方文档<a href="https://doc.xiaominfo.com/">Knife4j · 集Swagger2及OpenAPI3为一体的增强解决方案. | Knife4j (xiaominfo.com)</a></p><h2 id="快速入门-swaggerknife4j"><a class="markdownIt-Anchor" href="#快速入门-swaggerknife4j"></a> 快速入门 Swagger&amp;&amp;knife4j</h2><h3 id="导入依赖"><a class="markdownIt-Anchor" href="#导入依赖"></a> 导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="开启增强"><a class="markdownIt-Anchor" href="#开启增强"></a> 开启增强</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="配置类"><a class="markdownIt-Anchor" href="#配置类"></a> 配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.knife4jquickstart.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: knife4j-quickstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: knife4j配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-05 09:29</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过knife4j生成接口文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(value = &quot;docket&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;正在生成接口文档&quot;</span>);</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;xxx项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;xxx项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.ezhixuan.knife4jquickstart.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller"><a class="markdownIt-Anchor" href="#controller"></a> controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.knife4jquickstart.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ezhixuan.knife4jquickstart.pojo.entity.User;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: knife4j-quickstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: controller-demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-05 09:31</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;你好&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;向客人问好&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户名&quot;, required = true, paramType = &quot;String&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sayHi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">sayHi</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;Hi:&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;登录&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pojo"><a class="markdownIt-Anchor" href="#pojo"></a> pojo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezhixuan.knife4jquickstart.pojo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: knife4j-quickstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-05 09:33</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户名&quot;, required = true, example = &quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;密码&quot;, required = true, example = &quot;123456&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230905112951285.png" alt="image-20230905112951285"></div><div class="image-meta"><span class="image-caption center">image-20230905112951285</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230905113002420.png" alt="image-20230905113002420"></div><div class="image-meta"><span class="image-caption center">image-20230905113002420</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230905113013447.png" alt="image-20230905113013447"></div><div class="image-meta"><span class="image-caption center">image-20230905113013447</span></div></div><h2 id="常用注解"><a class="markdownIt-Anchor" href="#常用注解"></a> 常用注解</h2><table><thead><tr><th>注解</th><th>作用</th><th>使用位置</th></tr></thead><tbody><tr><td>@Api</td><td>表示对类的说明常用参数</td><td>类上面</td></tr><tr><td>@ApiOperation</td><td>说明方法的用途、作用</td><td>方法上面</td></tr><tr><td>@ApiModel</td><td>表示一个返回响应数据的信息</td><td>响应类</td></tr><tr><td>@ApiModelProperty</td><td>描述响应类的属性</td><td>属性</td></tr><tr><td>@ApiImplicitParams</td><td>参数注解</td><td>方法上</td></tr></tbody></table><p><strong>@Api</strong>标识一个java类型是文档类，用在controller类的类名上</p><p>value: 字符串类型，对controller类的作用进行描述</p><p>tags: 字符串数组，同样对controller类的作用进行描述</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;你好&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>@ApiOperation</strong>作用在接口类的方法上，控制方法的相关描述</p><p>value：字符串，方法的功能描述</p><p>tags：字符串数组，标签组，同样可以描述方法的作用；</p><p>response：ClassType，显示指出返回的对象类型；在响应示例中会显示出改对象的字段以及示例、描述</p><p>code：响应代码，默认200，一般不改；</p><p>示例代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;向客人问好&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户名&quot;, required = true, paramType = &quot;String&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sayHi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">sayHi</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span>String name)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>@ApiModel</strong>表示一个实体类/模型文档，用在类名上</p><p>value: 字符串类型，设置模型别名</p><p>description: 字符串，对模型进行描述</p><p>示例代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;用户登录信息&quot;, description = &quot;判断用户登录状况&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>@ApiModelProperty</strong>作用在属性上，添加属性描述</p><p>value：字符串，字段描述；</p><p>required：boolean；指定参数是否必须，默认false；</p><p>example：字符串，参数值的示例</p><p>示例代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(value = &quot;用户名&quot;, required = true, example = &quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br></pre></td></tr></table></figure><p><strong>@ApiImplicitParams</strong>（@ApiImplicitParam 对单个参数）用在请求的方法上，包含一组参数说明</p><p>name：参数名</p><p>value：参数的说明、描述</p><p>required：参数是否必须必填</p><p>paramType：参数放在哪个地方</p><p>· query --&gt; 请求参数的获取：@RequestParam</p><p>· header --&gt; 请求参数的获取：@RequestHeader</p><p>· path（用于restful接口）–&gt; 请求参数的获取：@PathVariable</p><p>· body（请求体）–&gt;  @RequestBody User user</p><p>· form（普通表单提交）</p><p>dataType：参数类型，默认String，其它值dataType=“Integer”</p><p>defaultValue：参数的默认值</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;向客人问好&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户名&quot;, required = true, dataType = &quot;String&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(...)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sayHi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">sayHi</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span>String name)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;向客人问好&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户名&quot;, required = true, dataType = &quot;String&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sayHi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">sayHi</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span>String name)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">技术学习分享</summary>
    
    
    
    <category term="技术分享" scheme="https://www.ezhixuan.xyz/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/tags/java/"/>
    
    <category term="knife4j" scheme="https://www.ezhixuan.xyz/tags/knife4j/"/>
    
  </entry>
  
  <entry>
    <title>Xxl-Job</title>
    <link href="https://www.ezhixuan.xyz/post/586965a7/"/>
    <id>https://www.ezhixuan.xyz/post/586965a7/</id>
    <published>2023-09-01T17:06:02.000Z</published>
    <updated>2023-09-01T17:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xxl-job"><a class="markdownIt-Anchor" href="#xxl-job"></a> xxl-job</h1><p>XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p><p>源码地址：<a href="https://gitee.com/xuxueli0323/xxl-job">xxl-job: 一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</a></p><p>文档地址：<a href="https://www.xuxueli.com/xxl-job/">分布式任务调度平台XXL-JOB (xuxueli.com)</a></p><h2 id="分布式任务调度"><a class="markdownIt-Anchor" href="#分布式任务调度"></a> 分布式任务调度</h2><ol><li><p>为什么使用xxl-job</p><p>xxl-job是一款分布式任务调度的开源框架</p><p>与Springboot提供的@scheduled定时任务相比</p><p>@Scheduled存在以下问题</p><ul><li>定时任务<strong>失败无法重试</strong></li><li>在处理集群任务时会出现<strong>重复执行</strong>的问题</li><li>cron表达式定义在代码之中，<strong>不方便修改</strong></li><li>当任务量过大时，<strong>无法有效分片执行</strong></li></ul><p>使用xxl-job来解决这些问题</p></li><li><p>什么是分布式任务调度</p></li></ol><p>当前软件的架构已经向分布式架构转变，将单体项目拆分成若干服务，服务之间通过网络交互来完成业务处理。在分布式架构下，一个服务往往会部署多个实例来运行业务，在这种<strong>分布式系统环境下运行任务调度</strong>，称为<strong>分布式调度</strong></p><p>​1、并行任务调度</p><p>并行任务调度实现靠多线程，如果有大量任务需要调度，此时光靠多线程就会有瓶颈了，因为一台计算机CPU的处理能力是有限的。</p><p>如果将任务调度程序分布式部署，每个结点还可以<strong>部署为集群</strong>，这样就可以让<strong>多台计算机共同去完成</strong>任务调度，我们可以将<strong>任务分割为若干个分片</strong>，由<strong>不同的实例并行执行</strong>，来提高任务调度的处理效率。</p><p>​2、高可用</p><p>若某一个实例宕机，不影响其他实例来执行任务。</p><p>​3、弹性扩容</p><p>当集群中<strong>增加实例</strong>就可以提高并执行任务的处理效率。</p><p>​4、任务管理与监测</p><p>对系统中存在的所有定时任务进行统一的管理及监测。让开发人员及运维人员能够<strong>时刻了解任务执行情况</strong>，从而做出快速的应急处理响应。</p><ol start="3"><li><p>分布式任务调度面临的问题：</p><p>当任务调度以集群方式部署，同一个任务调度可能会执行多次，例如：电商系统定期发放优惠券，就可能重复发放优惠券，对公司造成损失，信用卡还款提醒就会重复执行多次，给用户造成烦恼，所以我们需要控制相同的任务在多个运行实例上只执行一次。常见解决方案：</p><p>分布式锁，多个实例在任务执行前首先需要获取锁，如果获取失败那么就证明有其他服务已经在运行，如果获取成功那么证明没有服务在运行定时任务，那么就可以执行。</p><p>ZooKeeper选举，利用ZooKeeper对Leader实例执行定时任务，执行定时任务的时候判断自己是否是Leader，如果不是则不执行，如果是则执行业务逻辑，这样也能达到目的。</p></li></ol><h2 id="特性"><a class="markdownIt-Anchor" href="#特性"></a> 特性</h2><p><strong>简单灵活</strong> 提供Web页面对任务进行管理，管理系统支持用户管理、权限控制； 支持容器部署； 支持通过通用HTTP提供跨平台任务调度；</p><p><strong>丰富的任务管理功能</strong> 支持页面对任务CRUD操作； 支持在页面编写脚本任务、命令行任务、Java代码任务并执行； 支持任务级联编排，父任务执行结束后触发子任务执行； 支持设置指定任务执行节点路由策略，包括轮询、随机、广播、故障转移、忙碌转移等； 支持Cron方式、任务依赖、调度中心API接口方式触发任务执行</p><p><strong>高性能</strong> 任务调度流程全异步化设计实现，如异步调度、异步运行、异步回调等，有效对密集调度进行流量削峰；</p><p><strong>高可用</strong> 任务调度中心、任务执行节点均 集群部署，支持动态扩展、故障转移 支持任务配置路由故障转移策略，执行器节点不可用是自动转移到其他节点执行 支持任务超时控制、失败重试配置 支持任务处理阻塞策略：调度当任务执行节点忙碌时来不及执行任务的处理策略，包括：串行、抛弃、覆盖策略</p><p><strong>易于监控运维</strong> 支持设置任务失败邮件告警，预留接口支持短信、钉钉告警； 支持实时查看任务执行运行数据统计图表、任务进度监控数据、任务完整执行日志；</p><h2 id="部署xxl-job"><a class="markdownIt-Anchor" href="#部署xxl-job"></a> 部署xxl-job</h2><h3 id="调度中心环境要求"><a class="markdownIt-Anchor" href="#调度中心环境要求"></a> 调度中心环境要求</h3><ul><li>Maven3+</li><li>Jdk1.8+</li><li>Mysql5.7+</li></ul><h3 id="初始化调度数据库"><a class="markdownIt-Anchor" href="#初始化调度数据库"></a> 初始化调度数据库</h3><p>请下载项目源码并解压，获取 “调度数据库初始化SQL脚本” 并执行即可。</p><p>位置：<code>/xxl-job/doc/db/tables_xxl_job.sql</code>  共8张表</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- xxl_job_lock：任务调度锁表；</span><br><span class="line">- xxl_job_group：执行器信息表，维护任务执行器信息；</span><br><span class="line">- xxl_job_info：调度扩展信息表： 用于保存XXL-JOB调度任务的扩展信息，如任务分组、任务名、机器地址、执行器、执行入参和报警邮件等等；</span><br><span class="line">- xxl_job_log：调度日志表： 用于保存XXL-JOB任务调度的历史信息，如调度结果、执行结果、调度入参、调度机器和执行器等等；</span><br><span class="line">- xxl_job_logglue：任务GLUE日志：用于保存GLUE更新历史，用于支持GLUE的版本回溯功能；</span><br><span class="line">- xxl_job_registry：执行器注册表，维护在线的执行器和调度中心机器地址信息；</span><br><span class="line">- xxl_job_user：系统用户表；</span><br></pre></td></tr></table></figure><p>调度中心支持集群部署，集群情况下各节点务必连接同一个mysql实例;</p><p>如果mysql做主从,调度中心集群节点务必强制走主库;</p><h3 id="部署调度中心"><a class="markdownIt-Anchor" href="#部署调度中心"></a> 部署调度中心</h3><p>调度中心项目：xxl-job-admin</p><p>作用：统一管理任务调度平台上调度任务，负责触发调度执行，并且提供任务管理平台。</p><p>步骤一：调度中心配置</p><p>调度中心配置文件地址：<code>/xxl-job/xxl-job-admin/src/main/resources/application.properties</code></p><p>数据库的连接信息修改为自己的数据库</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### web</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8888</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/xxl-job-admin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### actuator</span></span><br><span class="line"><span class="attr">management.server.servlet.context-path</span>=<span class="string">/actuator</span></span><br><span class="line"><span class="attr">management.health.mail.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### resources</span></span><br><span class="line"><span class="attr">spring.mvc.servlet.load-on-startup</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br><span class="line"><span class="attr">spring.resources.static-locations</span>=<span class="string">classpath:/static/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### freemarker</span></span><br><span class="line"><span class="attr">spring.freemarker.templateLoaderPath</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"><span class="attr">spring.freemarker.suffix</span>=<span class="string">.ftl</span></span><br><span class="line"><span class="attr">spring.freemarker.charset</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="attr">spring.freemarker.request-context-attribute</span>=<span class="string">request</span></span><br><span class="line"><span class="attr">spring.freemarker.settings.number_format</span>=<span class="string">0.##########</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### mybatis</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/mybatis-mapper/*Mapper.xml</span></span><br><span class="line"><span class="comment">#mybatis.type-aliases-package=com.xxl.job.admin.core.model</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, datasource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/xxl_job?Unicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### datasource-pool</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.minimum-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.maximum-pool-size</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.auto-commit</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.idle-timeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.pool-name</span>=<span class="string">HikariCP</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.max-lifetime</span>=<span class="string">900000</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.connection-timeout</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.connection-test-query</span>=<span class="string">SELECT 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, email</span></span><br><span class="line"><span class="attr">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="attr">spring.mail.port</span>=<span class="string">25</span></span><br><span class="line"><span class="attr">spring.mail.username</span>=<span class="string">xxx@qq.com</span></span><br><span class="line"><span class="attr">spring.mail.password</span>=<span class="string">xxx</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.socketFactory.class</span>=<span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, access token</span></span><br><span class="line"><span class="attr">xxl.job.accessToken</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, i18n (default is zh_CN, and you can choose &quot;zh_CN&quot;, &quot;zh_TC&quot; and &quot;en&quot;)</span></span><br><span class="line"><span class="attr">xxl.job.i18n</span>=<span class="string">zh_CN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## xxl-job, triggerpool max size</span></span><br><span class="line"><span class="attr">xxl.job.triggerpool.fast.max</span>=<span class="string">200</span></span><br><span class="line"><span class="attr">xxl.job.triggerpool.slow.max</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, log retention days</span></span><br><span class="line"><span class="attr">xxl.job.logretentiondays</span>=<span class="string">30</span></span><br></pre></td></tr></table></figure><p>启动调度中心，</p><p>localho:8080/xxl-job-amdin</p><p>默认登录账号 “admin/123456”</p><h2 id="docker安装xxl-job"><a class="markdownIt-Anchor" href="#docker安装xxl-job"></a> docker安装xxl-job</h2><p>1.创建mysql容器，初始化xxl-job的SQL脚本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql57 \</span><br><span class="line">-v /opt/mysql/conf:/etc/mysql \</span><br><span class="line">-v /opt/mysql/logs:/var/log/mysql \</span><br><span class="line">-v /opt/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><p>2.拉取镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull xuxueli/xxl-job-admin:2.3.0</span><br></pre></td></tr></table></figure><p>3.创建容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -e PARAMS=&quot;--spring.datasource.url=jdbc:mysql://192.168.88.130:3306/xxl_job?Unicode=true&amp;characterEncoding=UTF-8 \</span><br><span class="line">--spring.datasource.username=root \</span><br><span class="line">--spring.datasource.password=123456&quot; \</span><br><span class="line">-p 8888:8080 -v /tmp:/data/applogs \</span><br><span class="line">--name xxl-job-admin --restart=always  -d xuxueli/xxl-job-admin:2.3.0</span><br></pre></td></tr></table></figure><p><a href="http://192.168.88.128:8888/xxl-job-admin/toLogin">任务调度中心</a>访问地址</p><p>默认账号 admin</p><p>密码 123456</p><div class="tag-plugin image"><div class="image-bg"><img src="image-20230816161833815.png" alt="image-20230816161833815"></div><div class="image-meta"><span class="image-caption center">image-20230816161833815</span></div></div><h2 id="springboot集成xxl-job"><a class="markdownIt-Anchor" href="#springboot集成xxl-job"></a> Springboot集成xxl-job</h2><h3 id="导入依赖与使用版本保持一致"><a class="markdownIt-Anchor" href="#导入依赖与使用版本保持一致"></a> 导入依赖，与使用版本保持一致</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--xxl-job--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.xuxueli&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xxl-job-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="applicationyml配置"><a class="markdownIt-Anchor" href="#applicationyml配置"></a> application.yml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8881</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">xxl:</span></span><br><span class="line">  <span class="attr">job:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">addresses:</span> <span class="string">http://192.168.200.130:8888/xxl-job-admin</span></span><br><span class="line">    <span class="attr">executor:</span></span><br><span class="line">      <span class="attr">appname:</span> <span class="string">xxl-job-executor-sample</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="新建配置类"><a class="markdownIt-Anchor" href="#新建配置类"></a> 新建配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.xxljob.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.executor.impl.XxlJobSpringExecutor;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xxl-job config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xuxueli 2017-04-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxlJobConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(XxlJobConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String adminAddresses;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> XxlJobSpringExecutor <span class="title function_">xxlJobExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);</span><br><span class="line">        <span class="type">XxlJobSpringExecutor</span> <span class="variable">xxlJobSpringExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XxlJobSpringExecutor</span>();</span><br><span class="line">        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">        xxlJobSpringExecutor.setAppname(appname);</span><br><span class="line">        xxlJobSpringExecutor.setPort(port);</span><br><span class="line">        <span class="keyword">return</span> xxlJobSpringExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任务代码重要注解xxljobjobhandler"><a class="markdownIt-Anchor" href="#任务代码重要注解xxljobjobhandler"></a> 任务代码，重要注解:@XxlJob(“<strong>JobHandler</strong>”)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zyxstu.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.annotation.XxlJob;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XxlJob(&quot;xuanTest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">helloJob</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;简单任务执行中。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试-单节点"><a class="markdownIt-Anchor" href="#测试-单节点"></a> 测试-单节点</h3><ul><li><p>启动微服务</p></li><li><p>在xxl-job的调度中心中启动任务</p></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="image-20230816170502010.png" alt="image-20230816170502010"></div><div class="image-meta"><span class="image-caption center">image-20230816170502010</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230816170518069.png" alt="image-20230816170518069"></div><div class="image-meta"><span class="image-caption center">image-20230816170518069</span></div></div><h2 id="任务详解-执行器"><a class="markdownIt-Anchor" href="#任务详解-执行器"></a> 任务详解-执行器</h2><ul><li><p>执行器：任务的绑定的执行器，任务触发调度时将会自动发现注册成功的执行器, 实现任务自动发现功能;</p></li><li><p>另一方面也可以方便的进行任务分组。每个任务必须绑定一个执行器</p></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="image-20210729232926534.png" alt="image-20210729232926534"></div><div class="image-meta"><span class="image-caption center">image-20210729232926534</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20210729232825564.png" alt="image-20210729232825564"></div><div class="image-meta"><span class="image-caption center">image-20210729232825564</span></div></div><p>以下是执行器的属性说明：</p><table><thead><tr><th>属性名称</th><th>说明</th></tr></thead><tbody><tr><td>AppName</td><td>是每个执行器集群的唯一标示AppName, 执行器会周期性以AppName为对象进行自动注册。可通过该配置自动发现注册成功的执行器, 供任务调度时使用;</td></tr><tr><td>名称</td><td>执行器的名称, 因为AppName限制字母数字等组成,可读性不强, 名称为了提高执行器的可读性;</td></tr><tr><td>排序</td><td>执行器的排序, 系统中需要执行器的地方,如任务新增, 将会按照该排序读取可用的执行器列表;</td></tr><tr><td>注册方式</td><td>调度中心获取执行器地址的方式；</td></tr><tr><td>机器地址</td><td>注册方式为&quot;手动录入&quot;时有效，支持人工维护执行器的地址信息；</td></tr></tbody></table><p>自动注册和手动注册的区别和配置</p><div class="tag-plugin image"><div class="image-bg"><img src="image-20210729233016355.png" alt="image-20210729233016355"></div><div class="image-meta"><span class="image-caption center">image-20210729233016355</span></div></div><h2 id="任务详解-基础配置"><a class="markdownIt-Anchor" href="#任务详解-基础配置"></a> 任务详解-基础配置</h2><div class="tag-plugin image"><div class="image-bg"><img src="image-20230816170151366.png" alt="image-20230816170151366"></div><div class="image-meta"><span class="image-caption center">image-20230816170151366</span></div></div><p><strong>基础配置</strong></p><ul><li><p>执行器：每个任务必须绑定一个执行器, 方便给任务进行分组</p></li><li><p>任务描述：任务的描述信息，便于任务管理；</p></li><li><p>负责人：任务的负责人；</p></li><li><p>报警邮件：任务调度失败时邮件通知的邮箱地址，支持配置多邮箱地址，配置多个邮箱地址时用逗号分隔</p></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="image-20210729234009010.png" alt="image-20210729234009010"></div><div class="image-meta"><span class="image-caption center">image-20210729234009010</span></div></div><p><strong>调度配置</strong></p><ul><li>调度类型：<ul><li>无：该类型不会主动触发调度；</li><li>CRON：该类型将会通过CRON，触发任务调度；</li><li>固定速度：该类型将会以固定速度，触发任务调度；按照固定的间隔时间，周期性触发；</li></ul></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="image-20210729234114283.png" alt="image-20210729234114283"></div><div class="image-meta"><span class="image-caption center">image-20210729234114283</span></div></div><p><strong>任务配置</strong></p><ul><li>运行模式：</li></ul><p>​    BEAN模式：任务以JobHandler方式维护在执行器端；需要结合 “JobHandler” 属性匹配执行器中任务；</p><ul><li><p>JobHandler：运行模式为 “BEAN模式” 时生效，对应执行器中新开发的JobHandler类“@JobHandler”注解自定义的value值；</p></li><li><p>执行参数：任务执行所需的参数；</p></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="image-20210729234219162.png" alt="image-20210729234219162"></div><div class="image-meta"><span class="image-caption center">image-20210729234219162</span></div></div><p><strong>阻塞处理策略</strong></p><p>阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；</p><ul><li><p>单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO(First Input First Output)队列并以串行方式运行；</p></li><li><p>丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；</p></li><li><p>覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；</p></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="image-20210729234256062.png" alt="image-20210729234256062"></div><div class="image-meta"><span class="image-caption center">image-20210729234256062</span></div></div><p><strong>路由策略</strong></p><p>当执行器集群部署时，提供丰富的路由策略，包括；</p><ul><li><p>FIRST（第一个）：固定选择第一个机器；</p></li><li><p>LAST（最后一个）：固定选择最后一个机器；</p></li><li><p><strong>ROUND（轮询）</strong></p></li><li><p>RANDOM（随机）：随机选择在线的机器；</p></li><li><p>CONSISTENT_HASH（一致性HASH）：每个任务按照Hash算法固定选择某一台机器，且所有任务均匀散列在不同机器上。</p></li><li><p>LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举；</p></li><li><p>LEAST_RECENTLY_USED（最近最久未使用）：最久未使用的机器优先被选举；</p></li><li><p>FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；</p></li><li><p>BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；</p></li><li><p><strong>SHARDING_BROADCAST(分片广播)：广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务；</strong></p></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="image-20210729234409132.png" alt="image-20210729234409132"></div><div class="image-meta"><span class="image-caption center">image-20210729234409132</span></div></div>]]></content>
    
    
    <summary type="html">学习记录</summary>
    
    
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/tags/java/"/>
    
    <category term="学习" scheme="https://www.ezhixuan.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="开源框架" scheme="https://www.ezhixuan.xyz/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
