<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ezhixuan</title>
  <icon>https://www.ezhixuan.xyz/icon/android-chrome-192x192.png</icon>
  <subtitle>我们都要努力成为更好的自己 | 如果遇到了，就记录下来</subtitle>
  <link href="https://www.ezhixuan.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.ezhixuan.xyz/"/>
  <updated>2023-09-09T16:35:48.000Z</updated>
  <id>https://www.ezhixuan.xyz/</id>
  
  <author>
    <name>Ezhixuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis</title>
    <link href="https://www.ezhixuan.xyz/post/bae4ff13/"/>
    <id>https://www.ezhixuan.xyz/post/bae4ff13/</id>
    <published>2023-09-09T16:35:48.000Z</published>
    <updated>2023-09-09T16:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是redis"><a class="markdownIt-Anchor" href="#什么是redis"></a> 什么是redis</h2><p>redis是一款<strong>基于内存存储</strong>的开源<strong>NoSQL数据库</strong>，存储形式是<strong>基于key-value</strong>来进行存储的，提供了5种基本类型例如String，List，set，Zset，hash，一般可以用于作为业务与数据库之间的<strong>缓存中间件</strong>，或者作为数据库，实现<strong>消息队列</strong>，排行榜，好友关注，地理信息存储。因为redis是<strong>单线程</strong>的，每个命令都具备原子性，所以避免多线程之间的资源竞争和线程切换导致的资源消耗，同时因为基于内存存储，并且通过<strong>IO的多路复用</strong>，实现了<strong>低延迟速度快的特点</strong>。虽然基于内存，但是提供了<strong>数据持久化</strong>的解决方案，并且提供了主从复制和哨兵机制来实现<strong>redis的高可用</strong>，同时可以通过部署<strong>分片集群来支持海量数据</strong>的存储。</p><h2 id="redis安装"><a class="markdownIt-Anchor" href="#redis安装"></a> redis安装</h2><h3 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> windows</h3><p>实际上并不推荐在windows上安装redis，Redis官方也没有提供Windows版本的安装包。</p><p>不过可以网上下载一下平时使用也能满足大部分需要。</p><h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> linux</h3><h4 id="安装redis依赖"><a class="markdownIt-Anchor" href="#安装redis依赖"></a> 安装Redis依赖</h4><p>redis是基于C语言编写的，所以需要先安装redis所需要的gcc依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure><p>到redis官网下载最新版的安装包<a href="https://redis.io/download/#redis-downloads">Download | Redis</a></p><p>将安装包上传至linux虚拟机</p><p>到达上传目录</p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xzf redis-7.2.1.tar.gz</span><br></pre></td></tr></table></figure><p>解压后进入redis目录</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-7.2.1</span><br></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>我们使用 <code>cd /usr/local/bin</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># ll /usr/local/bin</span></span><br><span class="line">总用量 41668</span><br><span class="line">-rwxr-xr-x. 1 root root  6900720 9月   9 23:48 redis-benchmark</span><br><span class="line">lrwxrwxrwx. 1 root root       12 9月   9 23:48 redis-check-aof -&gt; redis-server</span><br><span class="line">lrwxrwxrwx. 1 root root       12 9月   9 23:48 redis-check-rdb -&gt; redis-server</span><br><span class="line">-rwxr-xr-x. 1 root root  7619712 9月   9 23:48 redis-cli</span><br><span class="line">lrwxrwxrwx. 1 root root       12 9月   9 23:48 redis-sentinel -&gt; redis-server</span><br><span class="line">-rwxr-xr-x. 1 root root 15411608 9月   9 23:48 redis-server</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到如下目录即是安装成功</p><p>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h2 id="redis启动"><a class="markdownIt-Anchor" href="#redis启动"></a> redis启动</h2><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230909235730879.png" alt="image-20230909235730879"></div><div class="image-meta"><span class="image-caption center">image-20230909235730879</span></div></div><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="指定配置启动"><a class="markdownIt-Anchor" href="#指定配置启动"></a> 指定配置启动</h3><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/redis/redis-7.2.1</code>），名字叫redis.conf：</p><p>我们先将这个配置文件备份一份：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes </span></span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">123321</span></span><br></pre></td></tr></table></figure><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">.</span></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">512mb</span></span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入redis安装目录 </span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis/redis-7.2.1</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class="line"><span class="comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span></span><br><span class="line">redis-cli -u 你的密码 shutdown</span><br></pre></td></tr></table></figure><h3 id="133开机自启"><a class="markdownIt-Anchor" href="#133开机自启"></a> 1.3.3.开机自启</h3><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/redis/redis-7.2.1/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure><h2 id="redis常用命令"><a class="markdownIt-Anchor" href="#redis常用命令"></a> redis常用命令</h2><h3 id="通用命令"><a class="markdownIt-Anchor" href="#通用命令"></a> 通用命令</h3><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li>KEYS：查看符合模板的所有key</li><li>DEL：删除一个指定的key</li><li>EXISTS：判断key是否存在</li><li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li><li>TTL：查看一个KEY的剩余有效期</li></ul><h3 id="string"><a class="markdownIt-Anchor" href="#string"></a> String</h3><p>String的常见命令有：</p><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型的键值对</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li></ul><h3 id="hash"><a class="markdownIt-Anchor" href="#hash"></a> Hash</h3><p>Hash的常见命令有：</p><ul><li><p>HSET key field value：添加或者修改hash类型key的field的值</p></li><li><p>HGET key field：获取一个hash类型key的field的值</p></li><li><p>HMSET：批量添加多个hash类型key的field的值</p></li><li><p>HMGET：批量获取多个hash类型key的field的值</p></li><li><p>HGETALL：获取一个hash类型的key中的所有的field和value</p></li><li><p>HKEYS：获取一个hash类型的key中的所有的field</p></li><li><p>HINCRBY:让一个hash类型key的字段值自增并指定步长</p></li><li><p>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p></li></ul><h3 id="list"><a class="markdownIt-Anchor" href="#list"></a> List</h3><p>List的常见命令有：</p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><h3 id="set"><a class="markdownIt-Anchor" href="#set"></a> Set</h3><p>Set的常见命令有：</p><ul><li>SADD key member … ：向set中添加一个或多个元素</li><li>SREM key member … : 移除set中的指定元素</li><li>SCARD key： 返回set中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于set中</li><li>SMEMBERS：获取set中的所有元素</li><li>SINTER key1 key2 … ：求key1与key2的交集</li></ul><h3 id="sortedset"><a class="markdownIt-Anchor" href="#sortedset"></a> sortedSet</h3><p>SortedSet的常见命令有：</p><ul><li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member : 获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li><li>ZDIFF、ZINTER、ZUNION：求差集、交集、并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><p><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</p></li><li><p><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</p></li></ul><h2 id="spring-data-redis"><a class="markdownIt-Anchor" href="#spring-data-redis"></a> Spring Data Redis</h2><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中</p><ul><li>redisTemplate.opsForValue()：操作字符串</li><li>redisTemplate.opsForHash()：操作hash</li><li>redisTemplate.opsForList()：操作list</li><li>redisTemplate.opsForSet()：操作set</li><li>redisTemplate.opsForZSet()：操作zset</li></ul>]]></content>
    
    
    <summary type="html">技术学习分享</summary>
    
    
    
    <category term="技术分享" scheme="https://www.ezhixuan.xyz/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/tags/java/"/>
    
    <category term="redis" scheme="https://www.ezhixuan.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>使用腾讯云Cos实现上传下载</title>
    <link href="https://www.ezhixuan.xyz/post/e2534ec2/"/>
    <id>https://www.ezhixuan.xyz/post/e2534ec2/</id>
    <published>2023-09-08T02:10:04.000Z</published>
    <updated>2023-09-08T02:10:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="本文中出现的所有xiaomotxcos-均可替换成任意自己填入"><a class="markdownIt-Anchor" href="#本文中出现的所有xiaomotxcos-均可替换成任意自己填入"></a> 本文中出现的所有xiaomo.txcos 均可替换成任意自己填入</h4></blockquote><h2 id="使用腾讯云cos实现上传下载"><a class="markdownIt-Anchor" href="#使用腾讯云cos实现上传下载"></a> 使用腾讯云cos实现上传下载</h2><h3 id="导入依赖"><a class="markdownIt-Anchor" href="#导入依赖"></a> 导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cos_api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.167<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="设置上传文件大小"><a class="markdownIt-Anchor" href="#设置上传文件大小"></a> 设置上传文件大小</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">servlet:</span></span><br><span class="line">  <span class="attr">multipart:</span></span><br><span class="line">    <span class="attr">max-request-size:</span> <span class="string">1024MB</span></span><br><span class="line">    <span class="attr">max-file-size:</span> <span class="string">1024MB</span> </span><br></pre></td></tr></table></figure><h3 id="配置文件通过配置文件填入对应数值"><a class="markdownIt-Anchor" href="#配置文件通过配置文件填入对应数值"></a> 配置文件，通过配置文件填入对应数值。</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">xiaomo:</span></span><br><span class="line">  <span class="attr">txcos:</span></span><br><span class="line">    <span class="attr">tmpSecretId:</span> <span class="comment"># 你的secretId</span></span><br><span class="line">    <span class="attr">tmpSecretKey:</span> <span class="comment"># 你的secretKey</span></span><br><span class="line">    <span class="attr">bucketName:</span> <span class="comment"># 你的bucketName</span></span><br><span class="line">    <span class="attr">region:</span> <span class="comment"># 你仓库的地址</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: xiaomo-take-out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 腾讯云Cos</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-08 10:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;xiaomo.txcos&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TencentCosProperties</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String tmpSecretId;</span><br><span class="line">  <span class="keyword">private</span> String tmpSecretKey;</span><br><span class="line">  <span class="keyword">private</span> String bucketName;</span><br><span class="line">  <span class="keyword">private</span> String region;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过ioc初始化bean"><a class="markdownIt-Anchor" href="#通过ioc初始化bean"></a> 通过IOC初始化Bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: xiaomo-take-out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-08 10:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CosConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">  <span class="keyword">public</span> TencentCosUtil <span class="title function_">tencentCosUtil</span><span class="params">(TencentCosProperties tencentCosProperties)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始创建腾讯云文件上传对象&#123;&#125;&quot;</span>, tencentCosProperties);</span><br><span class="line">    <span class="type">TencentCosUtil</span> <span class="variable">tencentCosUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TencentCosUtil</span>(</span><br><span class="line">            tencentCosProperties.getTmpSecretId(),</span><br><span class="line">            tencentCosProperties.getTmpSecretKey(),</span><br><span class="line">            tencentCosProperties.getBucketName(),</span><br><span class="line">            tencentCosProperties.getRegion());</span><br><span class="line">    <span class="keyword">return</span> tencentCosUtil;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入上传工具类"><a class="markdownIt-Anchor" href="#导入上传工具类"></a> 导入上传工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: xiaomo-take-out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: cos工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-08 11:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TencentCosUtil</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String tmpSecretId;</span><br><span class="line">  <span class="keyword">private</span> String tmpSecretKey;</span><br><span class="line">  <span class="keyword">private</span> String bucketName;</span><br><span class="line">  <span class="keyword">private</span> String region;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建COSClient实例</span></span><br><span class="line">    <span class="type">ClientConfig</span> <span class="variable">clientConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientConfig</span>(<span class="keyword">new</span> <span class="title class_">Region</span>(region));</span><br><span class="line">    clientConfig.setHttpProtocol(HttpProtocol.https);</span><br><span class="line">    <span class="type">COSClient</span> <span class="variable">cosClient</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">COSClient</span>(<span class="keyword">new</span> <span class="title class_">BasicCOSCredentials</span>(tmpSecretId, tmpSecretKey), clientConfig);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获取上传文件的输入流</span></span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">      <span class="comment">// 对象键(Key)是对象在存储桶中的唯一标识。</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span></span><br><span class="line">          Objects.requireNonNull(file.getOriginalFilename())</span><br><span class="line">              .substring(file.getOriginalFilename().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">      <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + substring;</span><br><span class="line">      <span class="comment">// 对上传文件分组</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">dateUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTime</span>().toString(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">      key = dateUrl + <span class="string">&quot;/&quot;</span> + key;</span><br><span class="line"></span><br><span class="line">      <span class="type">ObjectMetadata</span> <span class="variable">objectMetadata</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMetadata</span>();</span><br><span class="line"></span><br><span class="line">      <span class="type">PutObjectRequest</span> <span class="variable">putObjectRequest</span> <span class="operator">=</span></span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">PutObjectRequest</span>(bucketName, key, inputStream, objectMetadata);</span><br><span class="line">      <span class="type">PutObjectResult</span> <span class="variable">putObjectResult</span> <span class="operator">=</span> cosClient.putObject(putObjectRequest);</span><br><span class="line">      System.out.println(JSON.toJSONString(putObjectResult));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 返回上传文件路径</span></span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;https://&quot;</span>);</span><br><span class="line">      stringBuilder</span><br><span class="line">          .append(bucketName)</span><br><span class="line">          .append(<span class="string">&quot;.cos.&quot;</span>)</span><br><span class="line">          .append(region)</span><br><span class="line">          .append(<span class="string">&quot;.myqcloud.com/&quot;</span>)</span><br><span class="line">          .append(key);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后到需要使用的地方自动装配工具类使用即可"><a class="markdownIt-Anchor" href="#最后到需要使用的地方自动装配工具类使用即可"></a> 最后到需要使用的地方自动装配工具类使用即可</h3><p>这里以Impl为例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: xiaomo-take-out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-08 11:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CommonService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TencentCosUtil tencentCosUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">upload</span> <span class="operator">=</span> tencentCosUtil.upload(file);</span><br><span class="line">        <span class="keyword">return</span> Result.success(upload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用腾讯云cos实现上传下载</summary>
    
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/categories/java/"/>
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/tags/java/"/>
    
    <category term="腾讯云" scheme="https://www.ezhixuan.xyz/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
    <category term="cos" scheme="https://www.ezhixuan.xyz/tags/cos/"/>
    
  </entry>
  
  <entry>
    <title>公共字段自动填充</title>
    <link href="https://www.ezhixuan.xyz/post/781a6a1a/"/>
    <id>https://www.ezhixuan.xyz/post/781a6a1a/</id>
    <published>2023-09-07T13:27:04.000Z</published>
    <updated>2023-09-07T13:27:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用mp实现公共字段自动填充"><a class="markdownIt-Anchor" href="#使用mp实现公共字段自动填充"></a> 使用Mp实现公共字段自动填充</h2><ol><li>需要实现自动填充的字段上<strong>添加@TableFile标签</strong>，指定自动填充策略。</li><li><strong>实现MetaObjectHandler接口</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 创建时间 */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 更新时间 */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 创建人 */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 修改人 */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 插入元对象字段填充（用于插入时对公共字段的填充）</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> metaObject 元对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始插入填充&quot;</span>);</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 更新元对象字段填充（用于更新时对公共字段的填充）</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> metaObject 元对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始更新填充&quot;</span>);</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处BaseContext是由ThreadLocal获取。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字段填充策略枚举类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 判断注入的 insert 和 update 的 sql 脚本是否在对应情况下忽略掉字段的 if 标签生成</span></span><br><span class="line"><span class="comment"> * &lt;if test=&quot;...&quot;&gt;......&lt;/if&gt;</span></span><br><span class="line"><span class="comment"> * 判断优先级比 &#123;<span class="doctag">@link</span> FieldStrategy&#125; 高</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hubin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017-06-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">FieldFill</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认不处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UPDATE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入和更新时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT_UPDATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">公共字段自动填充</summary>
    
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/categories/java/"/>
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/tags/java/"/>
    
    <category term="学习分享" scheme="https://www.ezhixuan.xyz/tags/%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
