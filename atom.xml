<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ezhixuan</title>
  <icon>https://www.ezhixuan.xyz/icon/android-chrome-192x192.png</icon>
  <subtitle>我们都要努力成为更好的自己 | 如果遇到了，就记录下来</subtitle>
  <link href="https://www.ezhixuan.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.ezhixuan.xyz/"/>
  <updated>2023-09-10T07:59:48.000Z</updated>
  <id>https://www.ezhixuan.xyz/</id>
  
  <author>
    <name>Ezhixuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringDataRedis</title>
    <link href="https://www.ezhixuan.xyz/post/c4e4d16f/"/>
    <id>https://www.ezhixuan.xyz/post/c4e4d16f/</id>
    <published>2023-09-10T07:59:48.000Z</published>
    <updated>2023-09-10T07:59:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis-java"><a class="markdownIt-Anchor" href="#redis-java"></a> redis-java</h2><p>Redis 的 Java 客户端很多，常用的几种：</p><ul><li>Jedis</li><li>Lettuce</li><li>Spring Data Redis</li></ul><p>Spring 对 Redis 客户端进行了整合，提供了 Spring Data Redis，在Spring Boot项目中还提供了对应的Starter，即 spring-boot-starter-data-redis。</p><h2 id="spring-data-redis使用方式"><a class="markdownIt-Anchor" href="#spring-data-redis使用方式"></a> Spring Data Redis使用方式</h2><p>Spring Data Redis 是 Spring 的一部分，提供了在 Spring 应用中通过简单的配置就可以访问 Redis 服务，对 Redis 底层开发包进行了高度封装。在 Spring 项目中，可以使用Spring Data Redis来简化 Redis 操作。</p><p>Spring Boot提供了对应的Starter，maven坐标：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Data Redis中提供了一个高度封装的类：<strong>RedisTemplate</strong>，对相关api进行了归类封装,将同一类型操作封装为operation接口，具体分类如下：</p><ul><li>ValueOperations：string数据操作</li><li>SetOperations：set类型数据操作</li><li>ZSetOperations：zset类型数据操作</li><li>HashOperations：hash类型的数据操作</li><li>ListOperations：list类型的数据操作</li></ul><h3 id="导入spring-data-redis的maven坐标"><a class="markdownIt-Anchor" href="#导入spring-data-redis的maven坐标"></a> 导入Spring Data Redis的maven坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置redis数据源"><a class="markdownIt-Anchor" href="#配置redis数据源"></a> 配置Redis数据源</h3><p>在application.yml中添加</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="comment"># 使用的数据库</span></span><br><span class="line">    <span class="attr">host:</span> <span class="comment"># redis地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="comment"># redis端口</span></span><br><span class="line">    <span class="attr">password:</span> <span class="comment"># 你的密码 没设密码可以不用填</span></span><br></pre></td></tr></table></figure><p><strong>解释说明：</strong></p><p>database:指定使用Redis的哪个数据库，Redis服务启动后默认有16个数据库，编号分别是从0到15。</p><p>可以通过修改Redis配置文件来指定数据库的数量。</p><h3 id="编写配置类创建redistemplate对象"><a class="markdownIt-Anchor" href="#编写配置类创建redistemplate对象"></a> 编写配置类，创建RedisTemplate对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.redisquickstart.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: redis-quickStart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: redisTemplate初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-10 16:15</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建redisTemplate&quot;</span>);</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        <span class="comment">// 设置redis连接工厂对象</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// 设置redis key序列化器</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 设置redis value序列化器(可以不设置)</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解释说明：</strong></p><p>当前配置类不是必须的，因为 Spring Boot 框架会自动装配 RedisTemplate 对象，但是默认的key序列化器为</p><p>JdkSerializationRedisSerializer，导致我们存到Redis中后的数据和原始数据有差别，故设置为</p><p>StringRedisSerializer序列化器。</p><h3 id="通过redistemplate对象操作redis"><a class="markdownIt-Anchor" href="#通过redistemplate对象操作redis"></a> 通过RedisTemplate对象操作Redis</h3><p>在test下新建测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringDataRedisTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedisTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(redisTemplate);</span><br><span class="line">        <span class="comment">//string数据操作</span></span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">valueOperations</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        <span class="comment">//hash类型的数据操作</span></span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        <span class="comment">//list类型的数据操作</span></span><br><span class="line">        <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line">        <span class="comment">//set类型数据操作</span></span><br><span class="line">        <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line">        <span class="comment">//zset类型数据操作</span></span><br><span class="line">        <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910162223863.png" alt="image-20230910162223863"></div><div class="image-meta"><span class="image-caption center">image-20230910162223863</span></div></div><p>说明RedisTemplate对象注入成功，并且通过该RedisTemplate对象获取操作5种数据类型相关对象。</p><p>上述环境搭建完毕后，接下来，我们就来具体对常见5种数据类型进行操作。</p><h4 id="操作常见类型数据"><a class="markdownIt-Anchor" href="#操作常见类型数据"></a> 操作常见类型数据</h4><h5 id="操作字符串类型数据"><a class="markdownIt-Anchor" href="#操作字符串类型数据"></a> 操作字符串类型数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作字符串类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// set get setex setnx</span></span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       System.out.println(city);</span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;1234&quot;</span>,<span class="number">3</span>, TimeUnit.MINUTES);</span><br><span class="line">       redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="操作哈希类型数据"><a class="markdownIt-Anchor" href="#操作哈希类型数据"></a> 操作哈希类型数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作哈希类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//hset hget hdel hkeys hvals</span></span><br><span class="line">       <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">       hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">       hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) hashOperations.get(<span class="string">&quot;100&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">       System.out.println(name);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> hashOperations.keys(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">       System.out.println(keys);</span><br><span class="line"></span><br><span class="line">       <span class="type">List</span> <span class="variable">values</span> <span class="operator">=</span> hashOperations.values(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">       System.out.println(values);</span><br><span class="line"></span><br><span class="line">       hashOperations.delete(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="操作列表类型数据"><a class="markdownIt-Anchor" href="#操作列表类型数据"></a> 操作列表类型数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作列表类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//lpush lrange rpop llen</span></span><br><span class="line">       <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line">       listOperations.leftPushAll(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">       listOperations.leftPush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">List</span> <span class="variable">mylist</span> <span class="operator">=</span> listOperations.range(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">       System.out.println(mylist);</span><br><span class="line"></span><br><span class="line">       listOperations.rightPop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">       System.out.println(size);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="操作集合类型数据"><a class="markdownIt-Anchor" href="#操作集合类型数据"></a> 操作集合类型数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作集合类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//sadd smembers scard sinter sunion srem</span></span><br><span class="line">       <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line"></span><br><span class="line">       setOperations.add(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">       setOperations.add(<span class="string">&quot;set2&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">members</span> <span class="operator">=</span> setOperations.members(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">       System.out.println(members);</span><br><span class="line"></span><br><span class="line">       <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> setOperations.size(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">       System.out.println(size);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">intersect</span> <span class="operator">=</span> setOperations.intersect(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">       System.out.println(intersect);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">union</span> <span class="operator">=</span> setOperations.union(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">       System.out.println(union);</span><br><span class="line"></span><br><span class="line">       setOperations.remove(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="操作有序集合类型数据"><a class="markdownIt-Anchor" href="#操作有序集合类型数据"></a> 操作有序集合类型数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作有序集合类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testZset</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//zadd zrange zincrby zrem</span></span><br><span class="line">       <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">10</span>);</span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">12</span>);</span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">zset1</span> <span class="operator">=</span> zSetOperations.range(<span class="string">&quot;zset1&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">       System.out.println(zset1);</span><br><span class="line"></span><br><span class="line">       zSetOperations.incrementScore(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">       zSetOperations.remove(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="通用命令操作"><a class="markdownIt-Anchor" href="#通用命令操作"></a> 通用命令操作</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通用命令操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCommon</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//keys exists type del</span></span><br><span class="line">       <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">       System.out.println(keys);</span><br><span class="line"></span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">set1</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">           <span class="type">DataType</span> <span class="variable">type</span> <span class="operator">=</span> redisTemplate.type(key);</span><br><span class="line">           System.out.println(type.name());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       redisTemplate.delete(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">技术学习分享</summary>
    
    
    
    <category term="技术分享" scheme="https://www.ezhixuan.xyz/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/tags/java/"/>
    
    <category term="redis" scheme="https://www.ezhixuan.xyz/tags/redis/"/>
    
    <category term="spring" scheme="https://www.ezhixuan.xyz/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://www.ezhixuan.xyz/post/bae4ff13/"/>
    <id>https://www.ezhixuan.xyz/post/bae4ff13/</id>
    <published>2023-09-09T16:35:48.000Z</published>
    <updated>2023-09-09T16:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是redis"><a class="markdownIt-Anchor" href="#什么是redis"></a> 什么是redis</h2><p>redis是一款<strong>基于内存存储</strong>的开源<strong>NoSQL数据库</strong>，存储形式是<strong>基于key-value</strong>来进行存储的，提供了5种基本类型例如String，List，set，Zset，hash，一般可以用于作为业务与数据库之间的<strong>缓存中间件</strong>，或者作为数据库，实现<strong>消息队列</strong>，排行榜，好友关注，地理信息存储。因为redis是<strong>单线程</strong>的，每个命令都具备原子性，所以避免多线程之间的资源竞争和线程切换导致的资源消耗，同时因为基于内存存储，并且通过<strong>IO的多路复用</strong>，实现了<strong>低延迟速度快的特点</strong>。虽然基于内存，但是提供了<strong>数据持久化</strong>的解决方案，并且提供了主从复制和哨兵机制来实现<strong>redis的高可用</strong>，同时可以通过部署<strong>分片集群来支持海量数据</strong>的存储。</p><h2 id="redis安装"><a class="markdownIt-Anchor" href="#redis安装"></a> redis安装</h2><h3 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> windows</h3><p>实际上并不推荐在windows上安装redis，Redis官方也没有提供Windows版本的安装包。</p><p>不过可以网上下载一下平时使用也能满足大部分需要。</p><h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> linux</h3><h4 id="安装redis依赖"><a class="markdownIt-Anchor" href="#安装redis依赖"></a> 安装Redis依赖</h4><p>redis是基于C语言编写的，所以需要先安装redis所需要的gcc依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure><p>到redis官网下载最新版的安装包<a href="https://redis.io/download/#redis-downloads">Download | Redis</a></p><p>将安装包上传至linux虚拟机</p><p>到达上传目录</p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xzf redis-7.2.1.tar.gz</span><br></pre></td></tr></table></figure><p>解压后进入redis目录</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-7.2.1</span><br></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>我们使用 <code>cd /usr/local/bin</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># ll /usr/local/bin</span></span><br><span class="line">总用量 41668</span><br><span class="line">-rwxr-xr-x. 1 root root  6900720 9月   9 23:48 redis-benchmark</span><br><span class="line">lrwxrwxrwx. 1 root root       12 9月   9 23:48 redis-check-aof -&gt; redis-server</span><br><span class="line">lrwxrwxrwx. 1 root root       12 9月   9 23:48 redis-check-rdb -&gt; redis-server</span><br><span class="line">-rwxr-xr-x. 1 root root  7619712 9月   9 23:48 redis-cli</span><br><span class="line">lrwxrwxrwx. 1 root root       12 9月   9 23:48 redis-sentinel -&gt; redis-server</span><br><span class="line">-rwxr-xr-x. 1 root root 15411608 9月   9 23:48 redis-server</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到如下目录即是安装成功</p><p>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h2 id="redis启动"><a class="markdownIt-Anchor" href="#redis启动"></a> redis启动</h2><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230909235730879.png" alt="image-20230909235730879"></div><div class="image-meta"><span class="image-caption center">image-20230909235730879</span></div></div><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="指定配置启动"><a class="markdownIt-Anchor" href="#指定配置启动"></a> 指定配置启动</h3><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/redis/redis-7.2.1</code>），名字叫redis.conf：</p><p>我们先将这个配置文件备份一份：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes </span></span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">123321</span></span><br></pre></td></tr></table></figure><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">.</span></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">512mb</span></span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入redis安装目录 </span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis/redis-7.2.1</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class="line"><span class="comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span></span><br><span class="line">redis-cli -u 你的密码 shutdown</span><br></pre></td></tr></table></figure><h3 id="133开机自启"><a class="markdownIt-Anchor" href="#133开机自启"></a> 1.3.3.开机自启</h3><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/redis/redis-7.2.1/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure><h2 id="redis的基本数据类型"><a class="markdownIt-Anchor" href="#redis的基本数据类型"></a> redis的基本数据类型</h2><h3 id="string"><a class="markdownIt-Anchor" href="#string"></a> String</h3><p>Redis 字符串存储字节序列，包括文本、序列化对象和二进制数组。 因此，字符串是可以关联的最简单的值类型 一个 Redis 键。 默认情况下，单个 Redis 字符串的最大大小为 512 MB。</p><p>大多数字符串操作都是 O（1），这意味着它们非常高效。 但是，请注意 <a href="https://redis.io/commands/substr"><code>SUBSTR</code></a>、<a href="https://redis.io/commands/getrange"><code>GETRANGE</code></a> 和 <a href="https://redis.io/commands/setrange"><code>SETRANGE</code></a> 命令，它们可以是 O（n）。</p><h3 id="hash"><a class="markdownIt-Anchor" href="#hash"></a> hash</h3><p>Redis hash是结构化为字段值对集合的记录类型，Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于<strong>存储对象</strong>。</p><p>大多数 Redis 哈希命令都是 O（1）。</p><p>一些命令（如 <a href="https://redis.io/commands/hkeys"><code>HKEYS、</code></a><a href="https://redis.io/commands/hvals"><code>HVALS</code> 和</a> <a href="https://redis.io/commands/hgetall"><code>HGETALL</code></a>）是 O（n），其中 n 是字段值对的数量。</p><h3 id="list"><a class="markdownIt-Anchor" href="#list"></a> list</h3><p>Redis中的List其实就是链表（Redis用双端链表实现List）。</p><p>列表对于许多任务很有用，这是两个非常有代表性的用例 如下：</p><ul><li>记住用户发布到社交网络中的<strong>最新更新</strong>。</li><li><strong>进程之间的通信</strong>，使用使用者-生产者模式，其中生产者将项目推送到列表中，使用者（通常是<em>工作人员</em>）使用这些项目并执行操作。Redis 具有特殊的列表命令，使此用例更加可靠和高效。</li></ul><p>访问其头部或尾部的列表操作是 O（1），这意味着它们非常高效。 但是，操作列表中元素的命令通常是 O（n）。 这些示例包括 <a href="https://redis.io/commands/lindex"><code>LINDEX</code></a>、<a href="https://redis.io/commands/linsert"><code>LINSERT</code></a> 和 <a href="https://redis.io/commands/lset"><code>LSET。</code></a> 运行这些命令时要小心，主要是在对大型列表进行操作时。</p><h3 id="set"><a class="markdownIt-Anchor" href="#set"></a> set</h3><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><p>Redis 集是唯一字符串（成员）的无序集合。 您可以使用 Redis 集有效地：</p><ul><li><strong>跟踪</strong>唯一项目（例如，跟踪访问给定博客文章的所有唯一 IP 地址）。</li><li><strong>表示关系</strong>（例如，具有给定角色的所有用户的集合）。</li><li>执行常见的集合操作，例如<strong>交集、并集和差分</strong>。</li></ul><p>大多数集合操作（包括添加、删除和检查项是否为集合成员）都是 O（1）。 这意味着它们非常高效。 但是，对于具有数十万或更多成员的大型集，在运行 <a href="https://redis.io/commands/smembers"><code>SMEMBERS</code></a> 命令时应格外小心。 此命令为 O（n），并在单个响应中返回整个集合。 作为替代方法，请考虑 <a href="https://redis.io/commands/sscan"><code>SSCAN，</code></a>它允许您以迭代方式检索集合的所有成员。</p><h3 id="sortedset"><a class="markdownIt-Anchor" href="#sortedset"></a> sortedSet</h3><p>Redis 排序集是按关联分数排序的唯一字符串（成员）的集合。 当多个字符串具有相同的分数时，字符串将按字典顺序排序。 排序集的一些用例包括：</p><ul><li><strong>排行榜</strong>。例如，您可以使用排序集轻松维护大型在线游戏中最高分的有序列表。</li><li><strong>速率限制器</strong>。特别是，您可以使用排序集来构建滑动窗口速率限制器，以防止过多的 API 请求。</li></ul><p>大多数排序集合运算是 O（log（n）），其中 <em>n</em> 是成员数。</p><p>在运行具有较大返回值（例如，数万或更多）的 <a href="https://redis.io/commands/zrange"><code>ZRANGE</code></a> 命令时要小心。 此命令的时间复杂度为 O（log（n） + m），其中 <em>m</em> 是返回的结果数。</p><h2 id="redis常用命令"><a class="markdownIt-Anchor" href="#redis常用命令"></a> redis常用命令</h2><h3 id="通用命令"><a class="markdownIt-Anchor" href="#通用命令"></a> 通用命令</h3><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li>KEYS：查看符合模板的所有key</li><li>DEL：删除一个指定的key</li><li>EXISTS：判断key是否存在</li><li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li><li>TTL：查看一个KEY的剩余有效期</li></ul><h3 id="string-2"><a class="markdownIt-Anchor" href="#string-2"></a> String</h3><p>String的常见命令有：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SET：添加或者修改已经存在的一个String类型的键值对</span></span><br><span class="line"><span class="built_in">set</span> key value </span><br><span class="line"><span class="comment"># GET：根据key获取String类型的value</span></span><br><span class="line">get key</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910094421648.png" alt="image-20230910094421648"></div><div class="image-meta"><span class="image-caption center">image-20230910094421648</span></div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MSET：批量添加多个String类型的键值对</span></span><br><span class="line">mset key value [key value ... key value]</span><br><span class="line"><span class="comment"># MGET：根据多个key获取多个String类型的value</span></span><br><span class="line">mget key key ... key</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910095004564.png" alt="image-20230910095004564"></div><div class="image-meta"><span class="image-caption center">image-20230910095004564</span></div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># INCR/DECR：让一个整型的key自增1/自减1</span></span><br><span class="line">incr/decr key</span><br><span class="line"><span class="comment"># INCRBY/DECRBY:让一个整型的key自增/自减并指定步长，例如：incrby age:ezhixuan 2 让age值自增2</span></span><br><span class="line">incrby/decrby key increment/decrement</span><br><span class="line"><span class="comment"># INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</span></span><br><span class="line">incrbyfloat key increment</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910095620287.png" alt="image-20230910095620287"></div><div class="image-meta"><span class="image-caption center">image-20230910095620287</span></div></div><blockquote><p>对于incr/decr在实际使用中直接使用incrby指定步长即可，增加填写正数，减少填写负数</p><p>若key不存在时会先初<code>始化为0</code>再进行操作</p><p>若key的存储值不能被解释为数字，则返回<code>错误</code></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</span></span><br><span class="line">setnx key value</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910100324015.png" alt="image-20230910100324015"></div><div class="image-meta"><span class="image-caption center">image-20230910100324015</span></div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SETEX：添加一个String类型的键值对，并且指定有效期</span></span><br><span class="line">setex key seconds value</span><br><span class="line"><span class="comment"># TTL：查看一个KEY的剩余有效期</span></span><br><span class="line">ttl key</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910100641315.png" alt="image-20230910100641315"></div><div class="image-meta"><span class="image-caption center">image-20230910100641315</span></div></div><h3 id="hash-2"><a class="markdownIt-Anchor" href="#hash-2"></a> Hash</h3><p>Hash的常见命令有：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HSET 添加或者修改hash类型key的field的值</span></span><br><span class="line">hset key field value [field value ... field value]</span><br><span class="line"><span class="comment"># HGETALL：获取一个hash类型的key中的所有的field和value</span></span><br><span class="line">hgetall key</span><br><span class="line"><span class="comment"># HGET：获取一个hash类型key的field的value</span></span><br><span class="line">hget key field</span><br><span class="line"><span class="comment"># HKEYS：获取一个hash类型的key中的所有的field</span></span><br><span class="line">hkeys key</span><br><span class="line"><span class="comment"># HVALS: 获取一个hash类型的key中所有的field的value</span></span><br><span class="line">hvals key</span><br><span class="line"><span class="comment"># HMGET：批量获取多个hash类型key的field的值</span></span><br><span class="line">hmget key field [field ... field]</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910102106812.png" alt="image-20230910102106812"></div><div class="image-meta"><span class="image-caption center">image-20230910102106812</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910102505152.png" alt="image-20230910102505152"></div><div class="image-meta"><span class="image-caption center">image-20230910102505152</span></div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HINCRBY:让一个hash类型key的字段值自增并指定步长 wage</span></span><br><span class="line">hincrby key field increment</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910102816901.png" alt="image-20230910102816901"></div><div class="image-meta"><span class="image-caption center">image-20230910102816901</span></div></div><blockquote><p>若key不存在时会先初<code>始化为0</code>再进行操作</p><p>若key的存储值不能被解释为数字，则返回<code>错误</code></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</span></span><br><span class="line">hsetnx key field value</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910103001935.png" alt="image-20230910103001935"></div><div class="image-meta"><span class="image-caption center">image-20230910103001935</span></div></div><h3 id="list-2"><a class="markdownIt-Anchor" href="#list-2"></a> List</h3><p>List的常见命令有：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LPUSH(RPUSH):向列表左(右)侧插入一个或多个元素</span></span><br><span class="line">lpush(rpush) key value</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910103617539.png" alt="image-20230910103617539"></div><div class="image-meta"><span class="image-caption center">image-20230910103617539</span></div></div><p>此时列表里应该是有 2 3 9 8</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LLEN: 返回列表长度</span></span><br><span class="line">llen key</span><br><span class="line"><span class="comment"># LRANGE:返回一段角标范围内的所有元素</span></span><br><span class="line">lrange key start stop</span><br><span class="line"><span class="comment"># LINDEX:返回列表中对应下标的元素</span></span><br><span class="line">lindex key index</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910104219300.png" alt="image-20230910104219300"></div><div class="image-meta"><span class="image-caption center">image-20230910104219300</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910104231479.png" alt="image-20230910104231479"></div><div class="image-meta"><span class="image-caption center">image-20230910104231479</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910104322343.png" alt="image-20230910104322343"></div><div class="image-meta"><span class="image-caption center">image-20230910104322343</span></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># LPOP(RPOP)：移除并返回列表左(右)侧的第一个元素，没有则返回nil</span><br><span class="line">lpop(rpop) key</span><br><span class="line"># BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</span><br><span class="line">blpop(brpop) key timeout</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910104554375.png" alt="image-20230910104554375"></div><div class="image-meta"><span class="image-caption center">image-20230910104554375</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910104723789.png" alt="image-20230910104723789"></div><div class="image-meta"><span class="image-caption center">image-20230910104723789</span></div></div><p>此时会发生阻塞，等待100秒，在这100秒内，我另起一个控制台添加元素，则会被监听到并移除</p><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910104847624.png" alt="image-20230910104847624"></div><div class="image-meta"><span class="image-caption center">image-20230910104847624</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910104855681.png" alt="image-20230910104855681"></div><div class="image-meta"><span class="image-caption center">image-20230910104855681</span></div></div><h3 id="set-2"><a class="markdownIt-Anchor" href="#set-2"></a> Set</h3><p>Set的常见命令有：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SADD:向set中添加一个或多个元素</span></span><br><span class="line">sadd key member [member ... member]</span><br><span class="line"><span class="comment"># SISMEMBER:判断一个元素是否存在于set中</span></span><br><span class="line">sismember key member</span><br><span class="line"><span class="comment"># SMEMBERS:获取set中的所有元素</span></span><br><span class="line">smembers key</span><br><span class="line"><span class="comment"># SCARD: 获取set中的元素个数</span></span><br><span class="line">scard key</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910111015754.png" alt="image-20230910111015754"></div><div class="image-meta"><span class="image-caption center">image-20230910111015754</span></div></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SRANDMEMBER:随机获取set中指定个数的元素(超过大小返回全部)</span></span><br><span class="line">srandmember key [count]</span><br><span class="line"><span class="comment"># SPOP:与SRANDMEMBER类似，差别在于SPOP获取并移除指定个数的元素</span></span><br><span class="line">spop key [count]</span><br><span class="line"><span class="comment"># SREM:移除set中的指定元素</span></span><br><span class="line">srem key member [member ... member]</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910111103188.png" alt="image-20230910111103188"></div><div class="image-meta"><span class="image-caption center">image-20230910111103188</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910111141708.png" alt="image-20230910111141708"></div><div class="image-meta"><span class="image-caption center">image-20230910111141708</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910111259652.png" alt="image-20230910111259652"></div><div class="image-meta"><span class="image-caption center">image-20230910111259652</span></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SINTER: 求多个集合的交集</span><br><span class="line">sinter key key [key]</span><br><span class="line"># SUNION: 求多个集合的并集</span><br><span class="line">sunion key key [key]</span><br><span class="line"># SDIFF: 求多个集合的差集</span><br><span class="line">sdiff key key [key]</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910111542814.png" alt="image-20230910111542814"></div><div class="image-meta"><span class="image-caption center">image-20230910111542814</span></div></div><h3 id="sortedset-2"><a class="markdownIt-Anchor" href="#sortedset-2"></a> sortedSet</h3><p>SortedSet的常见命令有：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ZADD:添加一个或多个元素到sorted set ，如果已经存在则更新其score值</span><br><span class="line">zadd key score member [score member ... score member]</span><br><span class="line"># ZSCORE:获取sorted set中的指定元素的score值</span><br><span class="line">zscore key member</span><br><span class="line"># ZCARD:获取sorted set中的元素个数</span><br><span class="line">zcard key</span><br><span class="line"># ZRANK(ZREVRANK):升序(降序)获取sorted set 中的指定元素的排名</span><br><span class="line">zrank key member</span><br><span class="line"># ZCOUNT:统计score值在给定范围内的所有元素的个数</span><br><span class="line">zcount key min max</span><br><span class="line"># ZRANGE(ZREVRANGE):按照score排序后，升序(降序)获取指定排名范围内的元素</span><br><span class="line">zrange key min max</span><br><span class="line"># ZRANGEBYSCORE(ZREVRANGEBYSCORE):按照score排序后，升序(降序)获取指定score范围内的元素</span><br><span class="line">zrangebyscore key min max</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910151725241.png" alt="image-20230910151725241"></div><div class="image-meta"><span class="image-caption center">image-20230910151725241</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910151738447.png" alt="image-20230910151738447"></div><div class="image-meta"><span class="image-caption center">image-20230910151738447</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910151746275.png" alt="image-20230910151746275"></div><div class="image-meta"><span class="image-caption center">image-20230910151746275</span></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ZINCRBY:让sorted set中的指定元素自增，步长为指定的increment值</span><br><span class="line">zincrby key increment member</span><br><span class="line"># ZREM:删除sorted set中的一个或多个指定元素</span><br><span class="line">zrem key member [member ... member]</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910152127127.png" alt="image-20230910152127127"></div><div class="image-meta"><span class="image-caption center">image-20230910152127127</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="image-20230910152237788.png" alt="image-20230910152237788"></div><div class="image-meta"><span class="image-caption center">image-20230910152237788</span></div></div><blockquote><p>所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><p><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</p></li><li><p><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</p></li></ul></blockquote><h2 id="其他数据类型"><a class="markdownIt-Anchor" href="#其他数据类型"></a> 其他数据类型</h2><h3 id="bitmap"><a class="markdownIt-Anchor" href="#bitmap"></a> bitmap</h3><p>Redis的Bitmap是一种位图数据结构，用于在Redis中高效地存储和处理位操作。它以比特（bit）为单位进行存储和操作，可以用来表示某个特定事件的存在与否，比如用户签到、用户在线状态等。</p><p>Bitmap在Redis中以字符串形式存储，每个字节可以存储8个位（8个比特），即一个字节可以表示8个事件的状态。Bitmap可以动态地自动扩展以适应需要存储的位数。</p><p>Redis提供了一系列的位操作命令来操作Bitmap，包括设置指定位置的位值、获取指定位置的位值、统计指定范围内的位值为1的个数、对两个Bitmap进行逻辑运算等。</p><p>以下是一些常用的Bitmap命令和示例：</p><ul><li><p><code>SETBIT key offset value</code>：设置指定位置的位值为1或0。</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">SETBIT</span> mybitmap <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p><code>GETBIT key offset</code>：获取指定位置的位值。</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GETBIT</span> mybitmap <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p><code>BITCOUNT key [start end]</code>：统计指定范围内的位值为1的个数。</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">BITCOUNT</span> mybitmap <span class="number">0</span> <span class="number">9</span></span><br></pre></td></tr></table></figure></li><li><p><code>BITOP operation destkey key [key ...]</code>：对一个或多个Bitmap执行逻辑运算，并将结果存储到destkey中。操作可以是AND、OR、XOR、NOT等。</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">BITOP</span> AND resultbitmap mybitmap1 mybitmap2</span><br></pre></td></tr></table></figure></li></ul><p>Bitmap在存储和处理大规模位数据时非常高效，它占用的内存空间相对较小，并且各种位操作可以在常数时间内完成。因此，它可以用于各种场景，如数据统计、布隆过滤器、用户在线状态跟踪等。</p>]]></content>
    
    
    <summary type="html">技术学习分享</summary>
    
    
    
    <category term="技术分享" scheme="https://www.ezhixuan.xyz/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/tags/java/"/>
    
    <category term="redis" scheme="https://www.ezhixuan.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>使用腾讯云Cos实现上传下载</title>
    <link href="https://www.ezhixuan.xyz/post/e2534ec2/"/>
    <id>https://www.ezhixuan.xyz/post/e2534ec2/</id>
    <published>2023-09-08T02:10:04.000Z</published>
    <updated>2023-09-08T02:10:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="本文中出现的所有xiaomotxcos-均可替换成任意自己填入"><a class="markdownIt-Anchor" href="#本文中出现的所有xiaomotxcos-均可替换成任意自己填入"></a> 本文中出现的所有xiaomo.txcos 均可替换成任意自己填入</h4></blockquote><h2 id="使用腾讯云cos实现上传下载"><a class="markdownIt-Anchor" href="#使用腾讯云cos实现上传下载"></a> 使用腾讯云cos实现上传下载</h2><h3 id="导入依赖"><a class="markdownIt-Anchor" href="#导入依赖"></a> 导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cos_api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.167<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="设置上传文件大小"><a class="markdownIt-Anchor" href="#设置上传文件大小"></a> 设置上传文件大小</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">servlet:</span></span><br><span class="line">  <span class="attr">multipart:</span></span><br><span class="line">    <span class="attr">max-request-size:</span> <span class="string">1024MB</span></span><br><span class="line">    <span class="attr">max-file-size:</span> <span class="string">1024MB</span> </span><br></pre></td></tr></table></figure><h3 id="配置文件通过配置文件填入对应数值"><a class="markdownIt-Anchor" href="#配置文件通过配置文件填入对应数值"></a> 配置文件，通过配置文件填入对应数值。</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">xiaomo:</span></span><br><span class="line">  <span class="attr">txcos:</span></span><br><span class="line">    <span class="attr">tmpSecretId:</span> <span class="comment"># 你的secretId</span></span><br><span class="line">    <span class="attr">tmpSecretKey:</span> <span class="comment"># 你的secretKey</span></span><br><span class="line">    <span class="attr">bucketName:</span> <span class="comment"># 你的bucketName</span></span><br><span class="line">    <span class="attr">region:</span> <span class="comment"># 你仓库的地址</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: xiaomo-take-out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 腾讯云Cos</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-08 10:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;xiaomo.txcos&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TencentCosProperties</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String tmpSecretId;</span><br><span class="line">  <span class="keyword">private</span> String tmpSecretKey;</span><br><span class="line">  <span class="keyword">private</span> String bucketName;</span><br><span class="line">  <span class="keyword">private</span> String region;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过ioc初始化bean"><a class="markdownIt-Anchor" href="#通过ioc初始化bean"></a> 通过IOC初始化Bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: xiaomo-take-out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-08 10:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CosConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">  <span class="keyword">public</span> TencentCosUtil <span class="title function_">tencentCosUtil</span><span class="params">(TencentCosProperties tencentCosProperties)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始创建腾讯云文件上传对象&#123;&#125;&quot;</span>, tencentCosProperties);</span><br><span class="line">    <span class="type">TencentCosUtil</span> <span class="variable">tencentCosUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TencentCosUtil</span>(</span><br><span class="line">            tencentCosProperties.getTmpSecretId(),</span><br><span class="line">            tencentCosProperties.getTmpSecretKey(),</span><br><span class="line">            tencentCosProperties.getBucketName(),</span><br><span class="line">            tencentCosProperties.getRegion());</span><br><span class="line">    <span class="keyword">return</span> tencentCosUtil;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入上传工具类"><a class="markdownIt-Anchor" href="#导入上传工具类"></a> 导入上传工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: xiaomo-take-out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: cos工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-08 11:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TencentCosUtil</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String tmpSecretId;</span><br><span class="line">  <span class="keyword">private</span> String tmpSecretKey;</span><br><span class="line">  <span class="keyword">private</span> String bucketName;</span><br><span class="line">  <span class="keyword">private</span> String region;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建COSClient实例</span></span><br><span class="line">    <span class="type">ClientConfig</span> <span class="variable">clientConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientConfig</span>(<span class="keyword">new</span> <span class="title class_">Region</span>(region));</span><br><span class="line">    clientConfig.setHttpProtocol(HttpProtocol.https);</span><br><span class="line">    <span class="type">COSClient</span> <span class="variable">cosClient</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">COSClient</span>(<span class="keyword">new</span> <span class="title class_">BasicCOSCredentials</span>(tmpSecretId, tmpSecretKey), clientConfig);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获取上传文件的输入流</span></span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">      <span class="comment">// 对象键(Key)是对象在存储桶中的唯一标识。</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span></span><br><span class="line">          Objects.requireNonNull(file.getOriginalFilename())</span><br><span class="line">              .substring(file.getOriginalFilename().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">      <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + substring;</span><br><span class="line">      <span class="comment">// 对上传文件分组</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">dateUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTime</span>().toString(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">      key = dateUrl + <span class="string">&quot;/&quot;</span> + key;</span><br><span class="line"></span><br><span class="line">      <span class="type">ObjectMetadata</span> <span class="variable">objectMetadata</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMetadata</span>();</span><br><span class="line"></span><br><span class="line">      <span class="type">PutObjectRequest</span> <span class="variable">putObjectRequest</span> <span class="operator">=</span></span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">PutObjectRequest</span>(bucketName, key, inputStream, objectMetadata);</span><br><span class="line">      <span class="type">PutObjectResult</span> <span class="variable">putObjectResult</span> <span class="operator">=</span> cosClient.putObject(putObjectRequest);</span><br><span class="line">      System.out.println(JSON.toJSONString(putObjectResult));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 返回上传文件路径</span></span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;https://&quot;</span>);</span><br><span class="line">      stringBuilder</span><br><span class="line">          .append(bucketName)</span><br><span class="line">          .append(<span class="string">&quot;.cos.&quot;</span>)</span><br><span class="line">          .append(region)</span><br><span class="line">          .append(<span class="string">&quot;.myqcloud.com/&quot;</span>)</span><br><span class="line">          .append(key);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后到需要使用的地方自动装配工具类使用即可"><a class="markdownIt-Anchor" href="#最后到需要使用的地方自动装配工具类使用即可"></a> 最后到需要使用的地方自动装配工具类使用即可</h3><p>这里以Impl为例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: xiaomo-take-out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Xuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2023-09-08 11:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CommonService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TencentCosUtil tencentCosUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">upload</span> <span class="operator">=</span> tencentCosUtil.upload(file);</span><br><span class="line">        <span class="keyword">return</span> Result.success(upload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用腾讯云cos实现上传下载</summary>
    
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/categories/java/"/>
    
    
    <category term="java" scheme="https://www.ezhixuan.xyz/tags/java/"/>
    
    <category term="腾讯云" scheme="https://www.ezhixuan.xyz/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
    <category term="cos" scheme="https://www.ezhixuan.xyz/tags/cos/"/>
    
  </entry>
  
</feed>
