[{"title":"Xxl-Job","path":"/post/586965a7/","content":"xxl-job XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。 源码地址：xxl-job: 一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。 文档地址：分布式任务调度平台XXL-JOB (xuxueli.com) 分布式任务调度 为什么使用xxl-job xxl-job是一款分布式任务调度的开源框架 与Springboot提供的@scheduled定时任务相比 @Scheduled存在以下问题 定时任务失败无法重试 在处理集群任务时会出现重复执行的问题 cron表达式定义在代码之中，不方便修改 当任务量过大时，无法有效分片执行 使用xxl-job来解决这些问题 什么是分布式任务调度 当前软件的架构已经向分布式架构转变，将单体项目拆分成若干服务，服务之间通过网络交互来完成业务处理。在分布式架构下，一个服务往往会部署多个实例来运行业务，在这种分布式系统环境下运行任务调度，称为分布式调度 ​\t1、并行任务调度 并行任务调度实现靠多线程，如果有大量任务需要调度，此时光靠多线程就会有瓶颈了，因为一台计算机CPU的处理能力是有限的。 如果将任务调度程序分布式部署，每个结点还可以部署为集群，这样就可以让多台计算机共同去完成任务调度，我们可以将任务分割为若干个分片，由不同的实例并行执行，来提高任务调度的处理效率。 ​\t2、高可用 若某一个实例宕机，不影响其他实例来执行任务。 ​\t3、弹性扩容 当集群中增加实例就可以提高并执行任务的处理效率。 ​\t4、任务管理与监测 对系统中存在的所有定时任务进行统一的管理及监测。让开发人员及运维人员能够时刻了解任务执行情况，从而做出快速的应急处理响应。 分布式任务调度面临的问题： 当任务调度以集群方式部署，同一个任务调度可能会执行多次，例如：电商系统定期发放优惠券，就可能重复发放优惠券，对公司造成损失，信用卡还款提醒就会重复执行多次，给用户造成烦恼，所以我们需要控制相同的任务在多个运行实例上只执行一次。常见解决方案： 分布式锁，多个实例在任务执行前首先需要获取锁，如果获取失败那么就证明有其他服务已经在运行，如果获取成功那么证明没有服务在运行定时任务，那么就可以执行。 ZooKeeper选举，利用ZooKeeper对Leader实例执行定时任务，执行定时任务的时候判断自己是否是Leader，如果不是则不执行，如果是则执行业务逻辑，这样也能达到目的。 特性 简单灵活 提供Web页面对任务进行管理，管理系统支持用户管理、权限控制； 支持容器部署； 支持通过通用HTTP提供跨平台任务调度； 丰富的任务管理功能 支持页面对任务CRUD操作； 支持在页面编写脚本任务、命令行任务、Java代码任务并执行； 支持任务级联编排，父任务执行结束后触发子任务执行； 支持设置指定任务执行节点路由策略，包括轮询、随机、广播、故障转移、忙碌转移等； 支持Cron方式、任务依赖、调度中心API接口方式触发任务执行 高性能 任务调度流程全异步化设计实现，如异步调度、异步运行、异步回调等，有效对密集调度进行流量削峰； 高可用 任务调度中心、任务执行节点均 集群部署，支持动态扩展、故障转移 支持任务配置路由故障转移策略，执行器节点不可用是自动转移到其他节点执行 支持任务超时控制、失败重试配置 支持任务处理阻塞策略：调度当任务执行节点忙碌时来不及执行任务的处理策略，包括：串行、抛弃、覆盖策略 易于监控运维 支持设置任务失败邮件告警，预留接口支持短信、钉钉告警； 支持实时查看任务执行运行数据统计图表、任务进度监控数据、任务完整执行日志； 部署xxl-job 调度中心环境要求 Maven3+ Jdk1.8+ Mysql5.7+ 初始化调度数据库 请下载项目源码并解压，获取 “调度数据库初始化SQL脚本” 并执行即可。 位置：/xxl-job/doc/db/tables_xxl_job.sql 共8张表 - xxl_job_lock：任务调度锁表；- xxl_job_group：执行器信息表，维护任务执行器信息；- xxl_job_info：调度扩展信息表： 用于保存XXL-JOB调度任务的扩展信息，如任务分组、任务名、机器地址、执行器、执行入参和报警邮件等等；- xxl_job_log：调度日志表： 用于保存XXL-JOB任务调度的历史信息，如调度结果、执行结果、调度入参、调度机器和执行器等等；- xxl_job_logglue：任务GLUE日志：用于保存GLUE更新历史，用于支持GLUE的版本回溯功能；- xxl_job_registry：执行器注册表，维护在线的执行器和调度中心机器地址信息；- xxl_job_user：系统用户表； 调度中心支持集群部署，集群情况下各节点务必连接同一个mysql实例; 如果mysql做主从,调度中心集群节点务必强制走主库; 部署调度中心 调度中心项目：xxl-job-admin 作用：统一管理任务调度平台上调度任务，负责触发调度执行，并且提供任务管理平台。 步骤一：调度中心配置 调度中心配置文件地址：/xxl-job/xxl-job-admin/src/main/resources/application.properties 数据库的连接信息修改为自己的数据库 ### webserver.port=8888server.servlet.context-path=/xxl-job-admin### actuatormanagement.server.servlet.context-path=/actuatormanagement.health.mail.enabled=false### resourcesspring.mvc.servlet.load-on-startup=0spring.mvc.static-path-pattern=/static/**spring.resources.static-locations=classpath:/static/### freemarkerspring.freemarker.templateLoaderPath=classpath:/templates/spring.freemarker.suffix=.ftlspring.freemarker.charset=UTF-8spring.freemarker.request-context-attribute=requestspring.freemarker.settings.number_format=0.############# mybatismybatis.mapper-locations=classpath:/mybatis-mapper/*Mapper.xml#mybatis.type-aliases-package=com.xxl.job.admin.core.model### xxl-job, datasourcespring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?Unicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=rootspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver### datasource-poolspring.datasource.type=com.zaxxer.hikari.HikariDataSourcespring.datasource.hikari.minimum-idle=10spring.datasource.hikari.maximum-pool-size=30spring.datasource.hikari.auto-commit=truespring.datasource.hikari.idle-timeout=30000spring.datasource.hikari.pool-name=HikariCPspring.datasource.hikari.max-lifetime=900000spring.datasource.hikari.connection-timeout=10000spring.datasource.hikari.connection-test-query=SELECT 1### xxl-job, emailspring.mail.host=smtp.qq.comspring.mail.port=25spring.mail.username=xxx@qq.comspring.mail.password=xxxspring.mail.properties.mail.smtp.auth=truespring.mail.properties.mail.smtp.starttls.enable=truespring.mail.properties.mail.smtp.starttls.required=truespring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory### xxl-job, access tokenxxl.job.accessToken=### xxl-job, i18n (default is zh_CN, and you can choose &quot;zh_CN&quot;, &quot;zh_TC&quot; and &quot;en&quot;)xxl.job.i18n=zh_CN## xxl-job, triggerpool max sizexxl.job.triggerpool.fast.max=200xxl.job.triggerpool.slow.max=100### xxl-job, log retention daysxxl.job.logretentiondays=30 启动调度中心， localho:8080/xxl-job-amdin 默认登录账号 “admin/123456” docker安装xxl-job 1.创建mysql容器，初始化xxl-job的SQL脚本 docker run -p 3306:3306 --name mysql57 \\-v /opt/mysql/conf:/etc/mysql \\-v /opt/mysql/logs:/var/log/mysql \\-v /opt/mysql/data:/var/lib/mysql \\-e MYSQL_ROOT_PASSWORD=root \\-d mysql:5.7 2.拉取镜像 docker pull xuxueli/xxl-job-admin:2.3.0 3.创建容器 docker run -e PARAMS=&quot;--spring.datasource.url=jdbc:mysql://192.168.88.130:3306/xxl_job?Unicode=true&amp;characterEncoding=UTF-8 \\--spring.datasource.username=root \\--spring.datasource.password=123456&quot; \\-p 8888:8080 -v /tmp:/data/applogs \\--name xxl-job-admin --restart=always -d xuxueli/xxl-job-admin:2.3.0 任务调度中心访问地址 默认账号 admin 密码 123456 image-20230816161833815 Springboot集成xxl-job 导入依赖，与使用版本保持一致 &lt;!--xxl-job--&gt;&lt;dependency&gt; &lt;groupId&gt;com.xuxueli&lt;/groupId&gt; &lt;artifactId&gt;xxl-job-core&lt;/artifactId&gt; &lt;version&gt;2.3.0&lt;/version&gt;&lt;/dependency&gt; application.yml配置 server: port: 8881xxl: job: admin: addresses: http://192.168.200.130:8888/xxl-job-admin executor: appname: xxl-job-executor-sample port: 9999 新建配置类 package com.heima.xxljob.config;import com.xxl.job.core.executor.impl.XxlJobSpringExecutor;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;/** * xxl-job config * * @author xuxueli 2017-04-28 */@Configurationpublic class XxlJobConfig &#123; private Logger logger = LoggerFactory.getLogger(XxlJobConfig.class); @Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;) private String adminAddresses; @Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;) private String appname; @Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;) private int port; @Bean public XxlJobSpringExecutor xxlJobExecutor() &#123; logger.info(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;); XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor(); xxlJobSpringExecutor.setAdminAddresses(adminAddresses); xxlJobSpringExecutor.setAppname(appname); xxlJobSpringExecutor.setPort(port); return xxlJobSpringExecutor; &#125;&#125; 任务代码，重要注解:@XxlJob(“JobHandler”) package com.zyxstu.service.impl;import com.xxl.job.core.handler.annotation.XxlJob;import org.springframework.stereotype.Component;@Componentpublic class HelloJob &#123; @XxlJob(&quot;xuanTest&quot;) public void helloJob()&#123; System.out.println(&quot;简单任务执行中。。。&quot;); &#125;&#125; 测试-单节点 启动微服务 在xxl-job的调度中心中启动任务 image-20230816170502010 image-20230816170518069 任务详解-执行器 执行器：任务的绑定的执行器，任务触发调度时将会自动发现注册成功的执行器, 实现任务自动发现功能; 另一方面也可以方便的进行任务分组。每个任务必须绑定一个执行器 image-20210729232926534 image-20210729232825564 以下是执行器的属性说明： 属性名称 说明 AppName 是每个执行器集群的唯一标示AppName, 执行器会周期性以AppName为对象进行自动注册。可通过该配置自动发现注册成功的执行器, 供任务调度时使用; 名称 执行器的名称, 因为AppName限制字母数字等组成,可读性不强, 名称为了提高执行器的可读性; 排序 执行器的排序, 系统中需要执行器的地方,如任务新增, 将会按照该排序读取可用的执行器列表; 注册方式 调度中心获取执行器地址的方式； 机器地址 注册方式为&quot;手动录入&quot;时有效，支持人工维护执行器的地址信息； 自动注册和手动注册的区别和配置 image-20210729233016355 任务详解-基础配置 image-20230816170151366 基础配置 执行器：每个任务必须绑定一个执行器, 方便给任务进行分组 任务描述：任务的描述信息，便于任务管理； 负责人：任务的负责人； 报警邮件：任务调度失败时邮件通知的邮箱地址，支持配置多邮箱地址，配置多个邮箱地址时用逗号分隔 image-20210729234009010 调度配置 调度类型： 无：该类型不会主动触发调度； CRON：该类型将会通过CRON，触发任务调度； 固定速度：该类型将会以固定速度，触发任务调度；按照固定的间隔时间，周期性触发； image-20210729234114283 任务配置 运行模式： ​ BEAN模式：任务以JobHandler方式维护在执行器端；需要结合 “JobHandler” 属性匹配执行器中任务； JobHandler：运行模式为 “BEAN模式” 时生效，对应执行器中新开发的JobHandler类“@JobHandler”注解自定义的value值； 执行参数：任务执行所需的参数； image-20210729234219162 阻塞处理策略 阻塞处理策略：调度过于密集执行器来不及处理时的处理策略； 单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO(First Input First Output)队列并以串行方式运行； 丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败； 覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务； image-20210729234256062 路由策略 当执行器集群部署时，提供丰富的路由策略，包括； FIRST（第一个）：固定选择第一个机器； LAST（最后一个）：固定选择最后一个机器； ROUND（轮询） RANDOM（随机）：随机选择在线的机器； CONSISTENT_HASH（一致性HASH）：每个任务按照Hash算法固定选择某一台机器，且所有任务均匀散列在不同机器上。 LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举； LEAST_RECENTLY_USED（最近最久未使用）：最久未使用的机器优先被选举； FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度； BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度； SHARDING_BROADCAST(分片广播)：广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务； image-20210729234409132","tags":["学习","java","开源框架"]},{"title":"“Hexo”","path":"/post/54193/","content":"什么是 Hexo？ Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装 详细参考文档 | Hexo 在安装完前置条件，nodejs、git后 $ npm install -g hexo-cli 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 补充（npm无法安装或速度过慢的问题） 方法一：修改配置文件 这种方法是通过修改npm的全局配置文件，将默认的镜像源改为淘宝镜像。具体步骤如下： 打开终端，输入以下命令，设置淘宝镜像源： npm config set registry https://registry.npm.taobao.org 输入以下命令，查看是否设置成功： npm config get registry 如果返回https://registry.npm.taobao.org/，说明配置的是淘宝镜像。 现在你就可以正常使用npm安装包了，例如： npm install express 这样就会从淘宝镜像下载express包，速度会比官方快很多。 如果你想恢复成原来的官方镜像源，只需要输入以下命令： npm config set registry https://registry.npmjs.org 方法二：通过安装cnpm 这种方法是通过安装一个名为cnpm的工具，它是一个和npm兼容的命令行工具，但是默认使用淘宝镜像源。具体步骤如下： 打开终端，输入以下命令，安装cnpm： npm install -g cnpm --registry=https://registry.npm.taobao.org 输入以下命令，查看是否安装成功： cnpm -v 如果返回cnpm的版本号，说明安装成功。 现在你就可以使用cnpm代替npm安装包了，例如： cnpm install express 这样也会从淘宝镜像下载express包。 如果你想卸载cnpm，只需要输入以下命令： cnpm install express $ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install #启动服务hexo s#停止服务ctrl + C#推送至github组合命令hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 启动对应服务，打开对应网址 安装主题 这里选择的是简洁的stellar 安装与更新 安装方法 在终端中输入： $ npm i hexo-theme-stellar 在 blog/_config.yml 文件中找到并修改： theme: stellar 可以重新启动服务查看效果 image-20230901214253946 绑定github 首先需要拥有github账号并且创建一个仓库 配置对应账户邮箱的ssh密钥 $ ssh-keygen -t rsa -C &quot;你的邮箱&quot; 输入之后一直回车直到生成结束。 image-20230901221254003 到达对应地址的id_rsa.pub文件中获取，一般是在c盘的用户你的用户文件夹的.ssh中 在GitHub setting中新建密钥并添加。 到gitbash中输入 $ git config --global user.name &quot;你的名字&quot;$ git config --global user.email &quot;你的邮箱&quot; 到主题根目录中找到_config.yml文件 在底部添加如下配置 # Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git branch: main repo: git@github.com:Ezhixuan/xuanBlog.git 在gitbash中输入以下命令安装上传插件并上传 $ cnpm install hexo-deployer-git --save$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 至此绑定成功 备份数据 由于某些原因，我们可能会需要修改配置文件等未被上传的文件，但恰巧文件丢失，github上收录的又是编译后的文件，所以对数据进行备份是有必要的。 这里选择在gitee上建立一个私有仓库来存储源码 如果使用gitee记得添加ssh #git初始化git init#创建hexo分支，用来存放源码git checkout -b hexo#git 文件添加git add .#git 提交git commit -m &quot;init&quot;#添加远程仓库git remote add origin &quot;仓库地址&quot;#push到hexo分支git push origin hexo 修改日常 依次执行 $ git add .$ git commit -m &#x27;...&#x27;$ git push origin hexo 如何恢复 当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤： $ git clone -b hexo &quot;仓库地址&quot;# 在本地新拷贝的YOURNAME.github.io文件夹下通过Git bash依次执行下列指令：$ npm install hexo$ npm install$ npm install hexo-deployer-git（记得，不需要hexo init这条指令）。 部署上线 因为笔者之前已经部署上线，暂时不多赘述，后续有空会进行补充，可以自行搜索查看一些文档视频等自行部署。","tags":["学习","hexo"]},{"title":"Hello World","path":"/post/4a17b156/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post $ hexo new &quot;My New Post&quot; More info: Writing Run server $ hexo server More info: Server Generate static files $ hexo generate More info: Generating Deploy to remote sites $ hexo deploy More info: Deployment"}]